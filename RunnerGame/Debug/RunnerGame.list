
RunnerGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002334  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020124  2**0
                  CONTENTS
  7 .bss          000000fc  20000124  20000124  00020124  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000220  20000220  00020124  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 10 .debug_info   000067cb  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001456  00000000  00000000  0002691f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007b8  00000000  00000000  00027d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f0  00000000  00000000  00028530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003288  00000000  00000000  00028c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d79  00000000  00000000  0002bea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ec21  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020bc  00000000  00000000  0002eca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000124 	.word	0x20000124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024a4 	.word	0x080024a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000128 	.word	0x20000128
 80001c4:	080024a4 	.word	0x080024a4

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <DAC_SetChannel1Data+0x34>)
 80002c6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	461a      	mov	r2, r3
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40007400 	.word	0x40007400

080002ec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <DMA_Init+0xac>)
 8000304:	4013      	ands	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000316:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000322:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800032e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000334:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800033a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000340:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4313      	orrs	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 0307 	bic.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4313      	orrs	r3, r2
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	691a      	ldr	r2, [r3, #16]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	f01c803f 	.word	0xf01c803f

0800039c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0201 	orr.w	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80003ba:	e005      	b.n	80003c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <DMA_GetFlagStatus+0x6c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d802      	bhi.n	8000424 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <DMA_GetFlagStatus+0x70>)
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	e001      	b.n	8000428 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DMA_GetFlagStatus+0x74>)
 8000426:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	e002      	b.n	8000440 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000446:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4013      	ands	r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000456:	2301      	movs	r3, #1
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e001      	b.n	8000460 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000460:	7dfb      	ldrb	r3, [r7, #23]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	4002640f 	.word	0x4002640f
 8000474:	40026000 	.word	0x40026000
 8000478:	40026400 	.word	0x40026400

0800047c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <DMA_ClearFlag+0x50>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d802      	bhi.n	8000494 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <DMA_ClearFlag+0x54>)
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e001      	b.n	8000498 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <DMA_ClearFlag+0x58>)
 8000496:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80004b0:	e006      	b.n	80004c0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	6093      	str	r3, [r2, #8]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	4002640f 	.word	0x4002640f
 80004d0:	40026000 	.word	0x40026000
 80004d4:	40026400 	.word	0x40026400

080004d8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <EXTI_Init+0xe0>)
 80004e6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	799b      	ldrb	r3, [r3, #6]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d04f      	beq.n	8000590 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004f0:	4931      	ldr	r1, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4013      	ands	r3, r2
 80004fe:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000500:	492d      	ldr	r1, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	43db      	mvns	r3, r3
 800050c:	4013      	ands	r3, r2
 800050e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	461a      	mov	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4413      	add	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	6811      	ldr	r1, [r2, #0]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800052a:	4923      	ldr	r1, [pc, #140]	; (80005b8 <EXTI_Init+0xe0>)
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <EXTI_Init+0xe0>)
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	43db      	mvns	r3, r3
 8000536:	4013      	ands	r3, r2
 8000538:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800053a:	491f      	ldr	r1, [pc, #124]	; (80005b8 <EXTI_Init+0xe0>)
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <EXTI_Init+0xe0>)
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	43db      	mvns	r3, r3
 8000546:	4013      	ands	r3, r2
 8000548:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b10      	cmp	r3, #16
 8000550:	d10e      	bne.n	8000570 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000552:	4919      	ldr	r1, [pc, #100]	; (80005b8 <EXTI_Init+0xe0>)
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <EXTI_Init+0xe0>)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000560:	4915      	ldr	r1, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4313      	orrs	r3, r2
 800056c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800056e:	e01d      	b.n	80005ac <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <EXTI_Init+0xe0>)
 8000572:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	e00d      	b.n	80005ac <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	400a      	ands	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40013c00 	.word	0x40013c00

080005bc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4013      	ands	r3, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <EXTI_GetITStatus+0x32>
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40013c00 	.word	0x40013c00

08000604 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <EXTI_ClearITPendingBit+0x1c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6153      	str	r3, [r2, #20]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40013c00 	.word	0x40013c00

08000624 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e076      	b.n	800072e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000640:	2201      	movs	r2, #1
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d165      	bne.n	8000728 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	401a      	ands	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d003      	beq.n	800069a <GPIO_Init+0x76>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d12e      	bne.n	80006f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2103      	movs	r1, #3
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	401a      	ands	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	4619      	mov	r1, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	2301      	movs	r3, #1
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	7992      	ldrb	r2, [r2, #6]
 80006e6:	4611      	mov	r1, r2
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	b292      	uxth	r2, r2
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d985      	bls.n	8000640 <GPIO_Init+0x1c>
    }
  }
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	4013      	ands	r3, r2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e001      	b.n	8000766 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
 8000780:	4613      	mov	r3, r2
 8000782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000784:	787b      	ldrb	r3, [r7, #1]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	887a      	ldrh	r2, [r7, #2]
 800078e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000790:	e002      	b.n	8000798 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	887a      	ldrh	r2, [r7, #2]
 8000796:	835a      	strh	r2, [r3, #26]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007c2:	e006      	b.n	80007d2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007c4:	4906      	ldr	r1, [pc, #24]	; (80007e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	43db      	mvns	r3, r3
 80007ce:	4013      	ands	r3, r2
 80007d0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007f6:	490a      	ldr	r1, [pc, #40]	; (8000820 <RCC_APB2PeriphClockCmd+0x3c>)
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <RCC_APB2PeriphClockCmd+0x3c>)
 80007fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000802:	e006      	b.n	8000812 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <RCC_APB2PeriphClockCmd+0x3c>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <RCC_APB2PeriphClockCmd+0x3c>)
 8000808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	43db      	mvns	r3, r3
 800080e:	4013      	ands	r3, r2
 8000810:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	887a      	ldrh	r2, [r7, #2]
 8000834:	819a      	strh	r2, [r3, #12]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	460b      	mov	r3, r1
 800084c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	891b      	ldrh	r3, [r3, #8]
 8000856:	b29a      	uxth	r2, r3
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	4013      	ands	r3, r2
 800085c:	b29b      	uxth	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e001      	b.n	800086c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800087c:	b490      	push	{r4, r7}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	220f      	movs	r2, #15
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80008a0:	4916      	ldr	r1, [pc, #88]	; (80008fc <SYSCFG_EXTILineConfig+0x80>)
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <SYSCFG_EXTILineConfig+0x80>)
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3302      	adds	r3, #2
 80008b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	43db      	mvns	r3, r3
 80008bc:	401a      	ands	r2, r3
 80008be:	1c83      	adds	r3, r0, #2
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <SYSCFG_EXTILineConfig+0x80>)
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461c      	mov	r4, r3
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <SYSCFG_EXTILineConfig+0x80>)
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3302      	adds	r3, #2
 80008d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008dc:	79f9      	ldrb	r1, [r7, #7]
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	431a      	orrs	r2, r3
 80008ec:	1ca3      	adds	r3, r4, #2
 80008ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc90      	pop	{r4, r7}
 80008fa:	4770      	bx	lr
 80008fc:	40013800 	.word	0x40013800

08000900 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b38      	ldr	r3, [pc, #224]	; (80009ec <Audio_MAL_IRQHandler+0xec>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4610      	mov	r0, r2
 8000910:	f7ff fd78 	bl	8000404 <DMA_GetFlagStatus>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d064      	beq.n	80009e4 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d04c      	beq.n	80009bc <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000922:	bf00      	nop
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fd53 	bl	80003d4 <DMA_GetCmdStatus>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f7      	bne.n	8000924 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <Audio_MAL_IRQHandler+0xec>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f7ff fd9c 	bl	800047c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <Audio_MAL_IRQHandler+0xf4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <Audio_MAL_IRQHandler+0xf8>)
 800094c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	4293      	cmp	r3, r2
 8000958:	bf28      	it	cs
 800095a:	4613      	movcs	r3, r2
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <Audio_MAL_IRQHandler+0xf8>)
 800095e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4924      	ldr	r1, [pc, #144]	; (80009f8 <Audio_MAL_IRQHandler+0xf8>)
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcc0 	bl	80002ec <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fd12 	bl	800039c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <Audio_MAL_IRQHandler+0xf4>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000984:	d203      	bcs.n	800098e <Audio_MAL_IRQHandler+0x8e>
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	e000      	b.n	8000990 <Audio_MAL_IRQHandler+0x90>
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <Audio_MAL_IRQHandler+0xfc>)
 8000990:	4413      	add	r3, r2
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <Audio_MAL_IRQHandler+0xf4>)
 8000994:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf28      	it	cs
 80009a6:	460b      	movcs	r3, r1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <Audio_MAL_IRQHandler+0xf0>)
 80009ac:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fcf1 	bl	800039c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80009ba:	e013      	b.n	80009e4 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcea 	bl	800039c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <Audio_MAL_IRQHandler+0xe8>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <Audio_MAL_IRQHandler+0xec>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4610      	mov	r0, r2
 80009d4:	f7ff fd52 	bl	800047c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <Audio_MAL_IRQHandler+0xf4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fb52 	bl	8002088 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000008 	.word	0x20000008
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	20000000 	.word	0x20000000
 80009f4:	2000014c 	.word	0x2000014c
 80009f8:	2000018c 	.word	0x2000018c
 80009fc:	0001fffe 	.word	0x0001fffe

08000a00 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a04:	f7ff ff7c 	bl	8000900 <Audio_MAL_IRQHandler>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a10:	f7ff ff76 	bl	8000900 <Audio_MAL_IRQHandler>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <SPI3_IRQHandler+0x3c>)
 8000a20:	f7ff ff0f 	bl	8000842 <SPI_I2S_GetFlagStatus>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d011      	beq.n	8000a4e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <SPI3_IRQHandler+0x40>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d106      	bne.n	8000a40 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000a32:	f001 fb34 	bl	800209e <EVAL_AUDIO_GetSampleCallBack>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2004      	movs	r0, #4
 8000a3c:	f7ff fc3a 	bl	80002b4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000a40:	f001 fb2d 	bl	800209e <EVAL_AUDIO_GetSampleCallBack>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <SPI3_IRQHandler+0x3c>)
 8000a4a:	f7ff feeb 	bl	8000824 <SPI_I2S_SendData>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40003c00 	.word	0x40003c00
 8000a58:	20000004 	.word	0x20000004

08000a5c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da0b      	bge.n	8000a88 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a70:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <NVIC_SetPriority+0x4c>)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	3b04      	subs	r3, #4
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000a86:	e009      	b.n	8000a9c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000a88:	4908      	ldr	r1, [pc, #32]	; (8000aac <NVIC_SetPriority+0x50>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abe:	d301      	bcc.n	8000ac4 <SysTick_Config+0x14>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e011      	b.n	8000ae8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000acc:	3b01      	subs	r3, #1
 8000ace:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad6:	f7ff ffc1 	bl	8000a5c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <SysTick_Config+0x40>)
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <systick_Init>:
//systick
extern __IO uint32_t Timingdelay;

//systick initialization
void systick_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	SysTick_Config((SystemCoreClock)/1000000); // generate an interrupt every 1 us
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <systick_Init+0x1c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <systick_Init+0x20>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffd3 	bl	8000ab0 <SysTick_Config>

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000bc 	.word	0x200000bc
 8000b14:	431bde83 	.word	0x431bde83

08000b18 <delay_us>:

//Delay method using systick
void delay_us(__IO uint32_t time)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	Timingdelay = time;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <delay_us+0x24>)
 8000b24:	6013      	str	r3, [r2, #0]
	while(Timingdelay !=0);
 8000b26:	bf00      	nop
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <delay_us+0x24>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1fb      	bne.n	8000b28 <delay_us+0x10>
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000218 	.word	0x20000218

08000b40 <LCD_Write>:

//Function to write bytes to data pins of LCD
void LCD_Write(uint8_t byte) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	//assume data for each bit is 0, then make it 1 if necessary
	//D7
	GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <LCD_Write+0xb8>)
 8000b52:	f7ff fe0f 	bl	8000774 <GPIO_WriteBit>
	if (byte & 1<<7) GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_SET);
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	da05      	bge.n	8000b6a <LCD_Write+0x2a>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <LCD_Write+0xb8>)
 8000b66:	f7ff fe05 	bl	8000774 <GPIO_WriteBit>
	//D6
	GPIO_WriteBit(GPIOC, GPIO_Pin_8, Bit_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <LCD_Write+0xb8>)
 8000b72:	f7ff fdff 	bl	8000774 <GPIO_WriteBit>
	if (byte & 1<<6) GPIO_WriteBit(GPIOC, GPIO_Pin_8, Bit_SET);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <LCD_Write+0x4c>
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <LCD_Write+0xb8>)
 8000b88:	f7ff fdf4 	bl	8000774 <GPIO_WriteBit>
	//D5
	GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <LCD_Write+0xb8>)
 8000b92:	f7ff fdef 	bl	8000774 <GPIO_WriteBit>
	if (byte & 1<<5) GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 0320 	and.w	r3, r3, #32
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <LCD_Write+0x6a>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <LCD_Write+0xb8>)
 8000ba6:	f7ff fde5 	bl	8000774 <GPIO_WriteBit>
	//D4
	GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <LCD_Write+0xb8>)
 8000bb0:	f7ff fde0 	bl	8000774 <GPIO_WriteBit>
	if (byte & 1<<4) GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <LCD_Write+0x88>
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LCD_Write+0xb8>)
 8000bc4:	f7ff fdd6 	bl	8000774 <GPIO_WriteBit>

	//now write data to LCD
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_SET); //Set E high
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <LCD_Write+0xbc>)
 8000bd0:	f7ff fdd0 	bl	8000774 <GPIO_WriteBit>
	delay_us(1000); //min delay of 310ns
 8000bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd8:	f7ff ff9e 	bl	8000b18 <delay_us>
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_RESET); //Set enable back to low
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <LCD_Write+0xbc>)
 8000be4:	f7ff fdc6 	bl	8000774 <GPIO_WriteBit>
	delay_us(1000); //min delay of 510ns
 8000be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bec:	f7ff ff94 	bl	8000b18 <delay_us>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <LCD_Write_Instruction>:

//Function to specifically write an instruction to LCD using LCD_Write
void LCD_Write_Instruction(uint8_t inst) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]

	//Set Instruction Register (RS low)
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LCD_Write_Instruction+0x40>)
 8000c12:	f7ff fdaf 	bl	8000774 <GPIO_WriteBit>

	//Ensure E is initially low
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <LCD_Write_Instruction+0x40>)
 8000c1e:	f7ff fda9 	bl	8000774 <GPIO_WriteBit>

	//write upper 4-bits of the data
	LCD_Write(inst);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff8b 	bl	8000b40 <LCD_Write>
	//write lower 4-bits
	LCD_Write(inst << 4);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff85 	bl	8000b40 <LCD_Write>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020000 	.word	0x40020000

08000c44 <LCD_Write_Char>:

//Function to write a single character to LCD using LCD_Write
void LCD_Write_Char(uint8_t byte) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	//Set Data Register (RS high)
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LCD_Write_Char+0x40>)
 8000c56:	f7ff fd8d 	bl	8000774 <GPIO_WriteBit>

	//ensure E is initially low
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <LCD_Write_Char+0x40>)
 8000c62:	f7ff fd87 	bl	8000774 <GPIO_WriteBit>

	//write upper 4-bits of the data
	LCD_Write(byte);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff69 	bl	8000b40 <LCD_Write>
	//write lower 4-bits
	LCD_Write(byte << 4);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff63 	bl	8000b40 <LCD_Write>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020000 	.word	0x40020000

08000c88 <LCD_Write_String>:

//Function to write an array of chars (string) to LCD using calls to LCD_Write_Char
void LCD_Write_String(uint8_t string[]) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0) {
 8000c94:	e00e      	b.n	8000cb4 <LCD_Write_String+0x2c>
		LCD_Write_Char(string[i]);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffcf 	bl	8000c44 <LCD_Write_Char>
		i++;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
		delay_us(1000); //min delay of 40us
 8000cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb0:	f7ff ff32 	bl	8000b18 <delay_us>
	while (string[i] != 0) {
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1e9      	bne.n	8000c96 <LCD_Write_String+0xe>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <LCD_Init>:

//The below functions handle settup for LCD and various microcontroller ports
//Functions are called in main upon program being flashed onto board

//LCD screen initialization
void LCD_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	//power up delay, min 40ms from datasheet
	delay_us(100000);
 8000cd0:	4841      	ldr	r0, [pc, #260]	; (8000dd8 <LCD_Init+0x10c>)
 8000cd2:	f7ff ff21 	bl	8000b18 <delay_us>

	//set RS and E to low for LCD_Write
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	483f      	ldr	r0, [pc, #252]	; (8000ddc <LCD_Init+0x110>)
 8000cde:	f7ff fd49 	bl	8000774 <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	483c      	ldr	r0, [pc, #240]	; (8000ddc <LCD_Init+0x110>)
 8000cea:	f7ff fd43 	bl	8000774 <GPIO_WriteBit>

	//Reset of LCD controller
	LCD_Write(lcd_FunctionReset);
 8000cee:	2030      	movs	r0, #48	; 0x30
 8000cf0:	f7ff ff26 	bl	8000b40 <LCD_Write>
	delay_us(10000); //min delay of 4.1ms
 8000cf4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cf8:	f7ff ff0e 	bl	8000b18 <delay_us>

	LCD_Write(lcd_FunctionReset);
 8000cfc:	2030      	movs	r0, #48	; 0x30
 8000cfe:	f7ff ff1f 	bl	8000b40 <LCD_Write>
	delay_us(1000); //min delay of 100us
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f7ff ff07 	bl	8000b18 <delay_us>

	LCD_Write(lcd_FunctionReset);
 8000d0a:	2030      	movs	r0, #48	; 0x30
 8000d0c:	f7ff ff18 	bl	8000b40 <LCD_Write>
	delay_us(1000); //delay omitted from datasheet but included just in case
 8000d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d14:	f7ff ff00 	bl	8000b18 <delay_us>

	//set LCD to 4-bit mode for less wiring
	LCD_Write(lcd_FunctionSet4bit);
 8000d18:	2028      	movs	r0, #40	; 0x28
 8000d1a:	f7ff ff11 	bl	8000b40 <LCD_Write>
	delay_us(1000); //min delay of 40us
 8000d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d22:	f7ff fef9 	bl	8000b18 <delay_us>
	//function set instruction
	LCD_Write_Instruction(lcd_FunctionSet4bit);
 8000d26:	2028      	movs	r0, #40	; 0x28
 8000d28:	f7ff ff6a 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min delay of 40us
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f7ff fef2 	bl	8000b18 <delay_us>

	//Continuing initialization
	//turn display OFF
	LCD_Write_Instruction(lcd_DisplayOff);
 8000d34:	2008      	movs	r0, #8
 8000d36:	f7ff ff63 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min delay of 40us
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f7ff feeb 	bl	8000b18 <delay_us>

	//clear display RAM
	LCD_Write_Instruction(lcd_Clear);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff5c 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(3000); //min delay of 1.64ms
 8000d48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d4c:	f7ff fee4 	bl	8000b18 <delay_us>

	//Set shift characteristics desired for game
	LCD_Write_Instruction(lcd_EntryMode);
 8000d50:	2006      	movs	r0, #6
 8000d52:	f7ff ff55 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min delay of 40us
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f7ff fedd 	bl	8000b18 <delay_us>

	//finally, turn screen back on
	LCD_Write_Instruction(lcd_DisplayOn);
 8000d5e:	200c      	movs	r0, #12
 8000d60:	f7ff ff4e 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min delay of 40us
 8000d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d68:	f7ff fed6 	bl	8000b18 <delay_us>

	//Store custom characters into CGRAM of LCD

	//store custom character to display's CGRAM @address 0x04
	LCD_Write_Instruction(0x60);
 8000d6c:	2060      	movs	r0, #96	; 0x60
 8000d6e:	f7ff ff47 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(run2[i]);
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <LCD_Init+0x114>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e00b      	b.n	8000d92 <LCD_Init+0xc6>
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <LCD_Init+0x114>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <LCD_Init+0x118>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff5e 	bl	8000c44 <LCD_Write_Char>
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <LCD_Init+0x114>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <LCD_Init+0x114>)
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <LCD_Init+0x114>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	ddef      	ble.n	8000d7a <LCD_Init+0xae>
	LCD_Write_Instruction(0x80); //end receiving char bits
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	f7ff ff30 	bl	8000c00 <LCD_Write_Instruction>

	//same process for obstacles @CGRAM 0x01
	LCD_Write_Instruction(0x48);
 8000da0:	2048      	movs	r0, #72	; 0x48
 8000da2:	f7ff ff2d 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(car[i]);
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <LCD_Init+0x114>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	e00b      	b.n	8000dc6 <LCD_Init+0xfa>
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LCD_Init+0x114>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <LCD_Init+0x11c>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff44 	bl	8000c44 <LCD_Write_Char>
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <LCD_Init+0x114>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <LCD_Init+0x114>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <LCD_Init+0x114>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	ddef      	ble.n	8000dae <LCD_Init+0xe2>
	LCD_Write_Instruction(0x80); //end receiving char bits
 8000dce:	2080      	movs	r0, #128	; 0x80
 8000dd0:	f7ff ff16 	bl	8000c00 <LCD_Write_Instruction>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	000186a0 	.word	0x000186a0
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	200001f8 	.word	0x200001f8
 8000de4:	20000064 	.word	0x20000064
 8000de8:	20000084 	.word	0x20000084

08000dec <LCD_GPIO_Init>:

//GPIO output initialization for LCD
void LCD_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef Struct_GPIO_PA8;
	GPIO_InitTypeDef Struct_GPIO_PA9;

	//enable clock to PORT C, has already been enabled to PORT A
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000df2:	2101      	movs	r1, #1
 8000df4:	2004      	movs	r0, #4
 8000df6:	f7ff fcd5 	bl	80007a4 <RCC_AHB1PeriphClockCmd>

	//set parameters for GPIOC
	Struct_GPIO_PC6.GPIO_Mode = GPIO_Mode_OUT;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Struct_GPIO_PC6.GPIO_Pin = GPIO_Pin_6;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
	Struct_GPIO_PC6.GPIO_OType = GPIO_OType_PP;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	Struct_GPIO_PC7.GPIO_Mode = GPIO_Mode_OUT;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Struct_GPIO_PC7.GPIO_Pin = GPIO_Pin_7;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	623b      	str	r3, [r7, #32]
	Struct_GPIO_PC7.GPIO_OType = GPIO_OType_PP;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Struct_GPIO_PC8.GPIO_Mode = GPIO_Mode_OUT;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	773b      	strb	r3, [r7, #28]
	Struct_GPIO_PC8.GPIO_Pin = GPIO_Pin_8;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	61bb      	str	r3, [r7, #24]
	Struct_GPIO_PC8.GPIO_OType = GPIO_OType_PP;
 8000e24:	2300      	movs	r3, #0
 8000e26:	77bb      	strb	r3, [r7, #30]

	Struct_GPIO_PC9.GPIO_Mode = GPIO_Mode_OUT;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	753b      	strb	r3, [r7, #20]
	Struct_GPIO_PC9.GPIO_Pin = GPIO_Pin_9;
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	613b      	str	r3, [r7, #16]
	Struct_GPIO_PC9.GPIO_OType = GPIO_OType_PP;
 8000e32:	2300      	movs	r3, #0
 8000e34:	75bb      	strb	r3, [r7, #22]

	//set parameters for GPIOA
	Struct_GPIO_PA8.GPIO_Mode = GPIO_Mode_OUT;
 8000e36:	2301      	movs	r3, #1
 8000e38:	733b      	strb	r3, [r7, #12]
	Struct_GPIO_PA8.GPIO_Pin = GPIO_Pin_8;
 8000e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3e:	60bb      	str	r3, [r7, #8]
	Struct_GPIO_PA8.GPIO_OType = GPIO_OType_PP;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73bb      	strb	r3, [r7, #14]

	Struct_GPIO_PA9.GPIO_Mode = GPIO_Mode_OUT;
 8000e44:	2301      	movs	r3, #1
 8000e46:	713b      	strb	r3, [r7, #4]
	Struct_GPIO_PA9.GPIO_Pin = GPIO_Pin_9;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	603b      	str	r3, [r7, #0]
	Struct_GPIO_PA9.GPIO_OType = GPIO_OType_PP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOC, &Struct_GPIO_PC6);
 8000e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <LCD_GPIO_Init+0xb4>)
 8000e5a:	f7ff fbe3 	bl	8000624 <GPIO_Init>
	GPIO_Init(GPIOC, &Struct_GPIO_PC7);
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	4619      	mov	r1, r3
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <LCD_GPIO_Init+0xb4>)
 8000e66:	f7ff fbdd 	bl	8000624 <GPIO_Init>
	GPIO_Init(GPIOC, &Struct_GPIO_PC8);
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LCD_GPIO_Init+0xb4>)
 8000e72:	f7ff fbd7 	bl	8000624 <GPIO_Init>
	GPIO_Init(GPIOC, &Struct_GPIO_PC9);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <LCD_GPIO_Init+0xb4>)
 8000e7e:	f7ff fbd1 	bl	8000624 <GPIO_Init>

	GPIO_Init(GPIOA, &Struct_GPIO_PA8);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <LCD_GPIO_Init+0xb8>)
 8000e8a:	f7ff fbcb 	bl	8000624 <GPIO_Init>
	GPIO_Init(GPIOA, &Struct_GPIO_PA9);
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <LCD_GPIO_Init+0xb8>)
 8000e94:	f7ff fbc6 	bl	8000624 <GPIO_Init>
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <GPA_BUTTON_Init>:

//GeneralPurpose button A initialization (jump)
void GPA_BUTTON_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	//define struct for button
	GPIO_InitTypeDef Struct_GPIO_BUTTON1;

	//enable clock to PORT A
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff fc77 	bl	80007a4 <RCC_AHB1PeriphClockCmd>

	//set parameters for GPIOA
	Struct_GPIO_BUTTON1.GPIO_Mode = GPIO_Mode_IN;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	713b      	strb	r3, [r7, #4]
	Struct_GPIO_BUTTON1.GPIO_Pin = GPIO_Pin_1;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	603b      	str	r3, [r7, #0]
	//Unless otherwise specified by a note, all I/Os are set as floating inputs during and after reset
	//Having embedded pull-ups and pull-downs removes the need to add external resistors - section 38.4.3 in ref manual
	Struct_GPIO_BUTTON1.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	71fb      	strb	r3, [r7, #7]
	Struct_GPIO_BUTTON1.GPIO_Speed = GPIO_Speed_50MHz;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA, &Struct_GPIO_BUTTON1);
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <GPA_BUTTON_Init+0x30>)
 8000ecc:	f7ff fbaa 	bl	8000624 <GPIO_Init>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020000 	.word	0x40020000

08000edc <EXTI_Init_GPAButton>:

//GPIO button A interrupt initialization (jump)
void EXTI_Init_GPAButton(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef Struct_EXTI_Button;
	NVIC_InitTypeDef Struct_NVIC;

	//Configures the priority grouping: pre-emption priority and subpriority.
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000ee2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000ee6:	f7ff f96f 	bl	80001c8 <NVIC_PriorityGroupConfig>

	////SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx registers:
	//Interrupt configuration registers and  selects the source of interrupt
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000eea:	2101      	movs	r1, #1
 8000eec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ef0:	f7ff fc78 	bl	80007e4 <RCC_APB2PeriphClockCmd>

	//Tell system to use PA0 for EXTI_Line0
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource1);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fcc0 	bl	800087c <SYSCFG_EXTILineConfig>

	//set parameters for EXTI
	Struct_EXTI_Button.EXTI_Line = EXTI_Line1;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
	Struct_EXTI_Button.EXTI_LineCmd = ENABLE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]
	Struct_EXTI_Button.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f04:	2300      	movs	r3, #0
 8000f06:	733b      	strb	r3, [r7, #12]
	Struct_EXTI_Button.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&Struct_EXTI_Button);
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fae1 	bl	80004d8 <EXTI_Init>

	//set parameters for NVIC for PA1 interrupt
	//PA1 is connected to EXTI_Line1, which has EXTI1_IRQn vector
	Struct_NVIC.NVIC_IRQChannel = EXTI1_IRQn;
 8000f16:	2307      	movs	r3, #7
 8000f18:	713b      	strb	r3, [r7, #4]
	Struct_NVIC.NVIC_IRQChannelCmd = ENABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	71fb      	strb	r3, [r7, #7]
	Struct_NVIC.NVIC_IRQChannelPreemptionPriority = 0x0A;
 8000f1e:	230a      	movs	r3, #10
 8000f20:	717b      	strb	r3, [r7, #5]
	Struct_NVIC.NVIC_IRQChannelSubPriority = 0x0A;
 8000f22:	230a      	movs	r3, #10
 8000f24:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&Struct_NVIC);
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f961 	bl	80001f0 <NVIC_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <GPB_BUTTON_Init>:

//GeneralPurpose button B initialization (slide)

void GPB_BUTTON_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	//define struct for button
	GPIO_InitTypeDef Struct_GPIO_BUTTON2;

	//enable clock to PORT A
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fc2f 	bl	80007a4 <RCC_AHB1PeriphClockCmd>

	//set parameters for GPIOA
	Struct_GPIO_BUTTON2.GPIO_Mode = GPIO_Mode_IN;
 8000f46:	2300      	movs	r3, #0
 8000f48:	713b      	strb	r3, [r7, #4]
	Struct_GPIO_BUTTON2.GPIO_Pin = GPIO_Pin_2;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	603b      	str	r3, [r7, #0]
	//Unless otherwise specified by a note, all I/Os are set as floating inputs during and after reset
	//Having embedded pull-ups and pull-downs removes the need to add external resistors - section 38.4.3 in ref manual
	Struct_GPIO_BUTTON2.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	71fb      	strb	r3, [r7, #7]
	Struct_GPIO_BUTTON2.GPIO_Speed = GPIO_Speed_50MHz;
 8000f52:	2302      	movs	r3, #2
 8000f54:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOB, &Struct_GPIO_BUTTON2);
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <GPB_BUTTON_Init+0x30>)
 8000f5c:	f7ff fb62 	bl	8000624 <GPIO_Init>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020400 	.word	0x40020400

08000f6c <EXTI_Init_GPBButton>:

//GPIO button interrupt initialization
void EXTI_Init_GPBButton(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef Struct_EXTI_Button;
	NVIC_InitTypeDef Struct_NVIC;

	//Configures the priority grouping: pre-emption priority and subpriority.
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000f72:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000f76:	f7ff f927 	bl	80001c8 <NVIC_PriorityGroupConfig>

	////SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx registers:
	//Interrupt configuration registers and  selects the source of interrupt
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f80:	f7ff fc30 	bl	80007e4 <RCC_APB2PeriphClockCmd>

	//Tell system to use PA0 for EXTI_Line0
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource2);
 8000f84:	2102      	movs	r1, #2
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fc78 	bl	800087c <SYSCFG_EXTILineConfig>

	//set parameters for EXTI
	Struct_EXTI_Button.EXTI_Line = EXTI_Line2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	60bb      	str	r3, [r7, #8]
	Struct_EXTI_Button.EXTI_LineCmd = ENABLE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73bb      	strb	r3, [r7, #14]
	Struct_EXTI_Button.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f94:	2300      	movs	r3, #0
 8000f96:	733b      	strb	r3, [r7, #12]
	Struct_EXTI_Button.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	737b      	strb	r3, [r7, #13]

	EXTI_Init(&Struct_EXTI_Button);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa99 	bl	80004d8 <EXTI_Init>

	//set parameters for NVIC for PA0 interrupt
	//PA0 is connected to EXTI_Line0, which has EXTI0_IRQn vector
	Struct_NVIC.NVIC_IRQChannel = EXTI2_IRQn;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	713b      	strb	r3, [r7, #4]
	Struct_NVIC.NVIC_IRQChannelCmd = ENABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
	Struct_NVIC.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	717b      	strb	r3, [r7, #5]
	Struct_NVIC.NVIC_IRQChannelSubPriority = 0x0F;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	71bb      	strb	r3, [r7, #6]

	NVIC_Init(&Struct_NVIC);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f919 	bl	80001f0 <NVIC_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <EXTI1_IRQHandler>:

//interrupt handler for GeneralPurpose button A (jump)
void EXTI1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff faf4 	bl	80005bc <EXTI_GetITStatus>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d018      	beq.n	800100c <EXTI1_IRQHandler+0x44>
	{
		uint8_t buttonvalue;
		//Make sure that interrupt flag is set
		if(EXTI_GetITStatus(EXTI_Line1)!=RESET)
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f7ff faee 	bl	80005bc <EXTI_GetITStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <EXTI1_IRQHandler+0x44>
		{
			delay_us(20000); //20ms debounce
 8000fe6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000fea:	f7ff fd95 	bl	8000b18 <delay_us>
			buttonvalue = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1);
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <EXTI1_IRQHandler+0x4c>)
 8000ff2:	f7ff fba5 	bl	8000740 <GPIO_ReadInputDataBit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
			if(buttonvalue==0)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <EXTI1_IRQHandler+0x44>
			{
				//sets flag high upon legal button press
				cpress = 1;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <EXTI1_IRQHandler+0x50>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]

				//clear interrupt flag
				EXTI_ClearITPendingBit(EXTI_Line1);
 8001006:	2002      	movs	r0, #2
 8001008:	f7ff fafc 	bl	8000604 <EXTI_ClearITPendingBit>
			}
		}
	}
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020000 	.word	0x40020000
 8001018:	200001c8 	.word	0x200001c8

0800101c <EXTI2_IRQHandler>:

//interrupt handler for GeneralPurpose button B (slide)
void EXTI2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line2) != RESET)
 8001022:	2004      	movs	r0, #4
 8001024:	f7ff faca 	bl	80005bc <EXTI_GetITStatus>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d018      	beq.n	8001060 <EXTI2_IRQHandler+0x44>
	{
		uint8_t buttonvalue2;
		//Make sure that interrupt flag is set
		if(EXTI_GetITStatus(EXTI_Line2)!=RESET)
 800102e:	2004      	movs	r0, #4
 8001030:	f7ff fac4 	bl	80005bc <EXTI_GetITStatus>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d012      	beq.n	8001060 <EXTI2_IRQHandler+0x44>
		{
			delay_us(20000); //20ms debounce
 800103a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800103e:	f7ff fd6b 	bl	8000b18 <delay_us>
			buttonvalue2 = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_2);
 8001042:	2104      	movs	r1, #4
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <EXTI2_IRQHandler+0x4c>)
 8001046:	f7ff fb7b 	bl	8000740 <GPIO_ReadInputDataBit>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
			if(buttonvalue2==0)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <EXTI2_IRQHandler+0x44>
			{
				//sets flag high upon legal button press
				bpress = 1;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <EXTI2_IRQHandler+0x50>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]

				//clear interrupt flag
				EXTI_ClearITPendingBit(EXTI_Line2);
 800105a:	2004      	movs	r0, #4
 800105c:	f7ff fad2 	bl	8000604 <EXTI_ClearITPendingBit>
			}
		}
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020400 	.word	0x40020400
 800106c:	200001ec 	.word	0x200001ec

08001070 <gameSetup>:

//Displays game's start screen and initializes vars upon game start or restart
void gameSetup(void) {
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
	//Versatile custom character definitions
	//These are defined here as opposed to LCD_Init as these addresses are used
	//to hold multiple custom characters defined above and are changed within game code

	//store custom character to display's CGRAM @address 0x07
	LCD_Write_Instruction(0x78);
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f7ff fdc2 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(jump[i]);
 800107c:	4ba5      	ldr	r3, [pc, #660]	; (8001314 <gameSetup+0x2a4>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e00b      	b.n	800109c <gameSetup+0x2c>
 8001084:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <gameSetup+0x2a4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4aa3      	ldr	r2, [pc, #652]	; (8001318 <gameSetup+0x2a8>)
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fdd9 	bl	8000c44 <LCD_Write_Char>
 8001092:	4ba0      	ldr	r3, [pc, #640]	; (8001314 <gameSetup+0x2a4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a9e      	ldr	r2, [pc, #632]	; (8001314 <gameSetup+0x2a4>)
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <gameSetup+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddef      	ble.n	8001084 <gameSetup+0x14>
	LCD_Write_Instruction(0x80); //end receiving char bits
 80010a4:	2080      	movs	r0, #128	; 0x80
 80010a6:	f7ff fdab 	bl	8000c00 <LCD_Write_Instruction>

	//store custom character to display's CGRAM @address 0x06
	LCD_Write_Instruction(0x70);
 80010aa:	2070      	movs	r0, #112	; 0x70
 80010ac:	f7ff fda8 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(jump3bottom[i]);
 80010b0:	4b98      	ldr	r3, [pc, #608]	; (8001314 <gameSetup+0x2a4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e00b      	b.n	80010d0 <gameSetup+0x60>
 80010b8:	4b96      	ldr	r3, [pc, #600]	; (8001314 <gameSetup+0x2a4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a97      	ldr	r2, [pc, #604]	; (800131c <gameSetup+0x2ac>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdbf 	bl	8000c44 <LCD_Write_Char>
 80010c6:	4b93      	ldr	r3, [pc, #588]	; (8001314 <gameSetup+0x2a4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a91      	ldr	r2, [pc, #580]	; (8001314 <gameSetup+0x2a4>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <gameSetup+0x2a4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	ddef      	ble.n	80010b8 <gameSetup+0x48>
	LCD_Write_Instruction(0x80); //end receiving char bits
 80010d8:	2080      	movs	r0, #128	; 0x80
 80010da:	f7ff fd91 	bl	8000c00 <LCD_Write_Instruction>

	//store custom character to display's CGRAM @address 0x05
	LCD_Write_Instruction(0x68);
 80010de:	2068      	movs	r0, #104	; 0x68
 80010e0:	f7ff fd8e 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(trickCar[i]);
 80010e4:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <gameSetup+0x2a4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00b      	b.n	8001104 <gameSetup+0x94>
 80010ec:	4b89      	ldr	r3, [pc, #548]	; (8001314 <gameSetup+0x2a4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a8b      	ldr	r2, [pc, #556]	; (8001320 <gameSetup+0x2b0>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fda5 	bl	8000c44 <LCD_Write_Char>
 80010fa:	4b86      	ldr	r3, [pc, #536]	; (8001314 <gameSetup+0x2a4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a84      	ldr	r2, [pc, #528]	; (8001314 <gameSetup+0x2a4>)
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b83      	ldr	r3, [pc, #524]	; (8001314 <gameSetup+0x2a4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b07      	cmp	r3, #7
 800110a:	ddef      	ble.n	80010ec <gameSetup+0x7c>
	LCD_Write_Instruction(0x80); //end receiving char bits
 800110c:	2080      	movs	r0, #128	; 0x80
 800110e:	f7ff fd77 	bl	8000c00 <LCD_Write_Instruction>

	//store custom character to display's CGRAM @address 0x03
	LCD_Write_Instruction(0x58);
 8001112:	2058      	movs	r0, #88	; 0x58
 8001114:	f7ff fd74 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(run1[i]);
 8001118:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <gameSetup+0x2a4>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e00b      	b.n	8001138 <gameSetup+0xc8>
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <gameSetup+0x2a4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a7f      	ldr	r2, [pc, #508]	; (8001324 <gameSetup+0x2b4>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd8b 	bl	8000c44 <LCD_Write_Char>
 800112e:	4b79      	ldr	r3, [pc, #484]	; (8001314 <gameSetup+0x2a4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a77      	ldr	r2, [pc, #476]	; (8001314 <gameSetup+0x2a4>)
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <gameSetup+0x2a4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b07      	cmp	r3, #7
 800113e:	ddef      	ble.n	8001120 <gameSetup+0xb0>
	LCD_Write_Instruction(0x80); //end receiving char bits
 8001140:	2080      	movs	r0, #128	; 0x80
 8001142:	f7ff fd5d 	bl	8000c00 <LCD_Write_Instruction>

	//store custom character to display's CGRAM @address 0x02
	LCD_Write_Instruction(0x50);
 8001146:	2050      	movs	r0, #80	; 0x50
 8001148:	f7ff fd5a 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(stand[i]);
 800114c:	4b71      	ldr	r3, [pc, #452]	; (8001314 <gameSetup+0x2a4>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e00b      	b.n	800116c <gameSetup+0xfc>
 8001154:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <gameSetup+0x2a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a73      	ldr	r2, [pc, #460]	; (8001328 <gameSetup+0x2b8>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fd71 	bl	8000c44 <LCD_Write_Char>
 8001162:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <gameSetup+0x2a4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <gameSetup+0x2a4>)
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b69      	ldr	r3, [pc, #420]	; (8001314 <gameSetup+0x2a4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b07      	cmp	r3, #7
 8001172:	ddef      	ble.n	8001154 <gameSetup+0xe4>
	LCD_Write_Instruction(0x80); //end receiving char bits
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	f7ff fd43 	bl	8000c00 <LCD_Write_Instruction>

	//same process for obstacles @CGRAM 0x00
	LCD_Write_Instruction(0x40);
 800117a:	2040      	movs	r0, #64	; 0x40
 800117c:	f7ff fd40 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(bird[i]);
 8001180:	4b64      	ldr	r3, [pc, #400]	; (8001314 <gameSetup+0x2a4>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e00b      	b.n	80011a0 <gameSetup+0x130>
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <gameSetup+0x2a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a67      	ldr	r2, [pc, #412]	; (800132c <gameSetup+0x2bc>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fd57 	bl	8000c44 <LCD_Write_Char>
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <gameSetup+0x2a4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a5d      	ldr	r2, [pc, #372]	; (8001314 <gameSetup+0x2a4>)
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <gameSetup+0x2a4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddef      	ble.n	8001188 <gameSetup+0x118>
	LCD_Write_Instruction(0x80); //end receiving char bits
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	f7ff fd29 	bl	8000c00 <LCD_Write_Instruction>

	//Display game's start screen

	//Set cursor to line 1
	LCD_Write_Instruction(lcd_SetCursor | lcd_LineOne);
 80011ae:	2080      	movs	r0, #128	; 0x80
 80011b0:	f7ff fd26 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min 40us delay
 80011b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b8:	f7ff fcae 	bl	8000b18 <delay_us>

	uint8_t intro[] = "Ready to Run?";
 80011bc:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <gameSetup+0x2c0>)
 80011be:	f107 0418 	add.w	r4, r7, #24
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	c407      	stmia	r4!, {r0, r1, r2}
 80011c6:	8023      	strh	r3, [r4, #0]
	LCD_Write_String(intro);
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd5b 	bl	8000c88 <LCD_Write_String>

	//set cursor to line 2
	LCD_Write_Instruction(lcd_SetCursor | lcd_LineTwo);
 80011d2:	20c0      	movs	r0, #192	; 0xc0
 80011d4:	f7ff fd14 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min 40us delay
 80011d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011dc:	f7ff fc9c 	bl	8000b18 <delay_us>

	uint8_t intro2[] = "     Dodge cars!";
 80011e0:	4b54      	ldr	r3, [pc, #336]	; (8001334 <gameSetup+0x2c4>)
 80011e2:	1d3c      	adds	r4, r7, #4
 80011e4:	461d      	mov	r5, r3
 80011e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	7023      	strb	r3, [r4, #0]
	intro2[3] = 0x02;
 80011ee:	2302      	movs	r3, #2
 80011f0:	71fb      	strb	r3, [r7, #7]
	LCD_Write_String(intro2);
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd47 	bl	8000c88 <LCD_Write_String>

	delay_us(1000000);
 80011fa:	484f      	ldr	r0, [pc, #316]	; (8001338 <gameSetup+0x2c8>)
 80011fc:	f7ff fc8c 	bl	8000b18 <delay_us>

	//ensure that ground and sky are both empty (filled with 16 spaces)
	for(i = 0; i < 17; i++) ground[i] = ' ';
 8001200:	4b44      	ldr	r3, [pc, #272]	; (8001314 <gameSetup+0x2a4>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e009      	b.n	800121c <gameSetup+0x1ac>
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <gameSetup+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <gameSetup+0x2cc>)
 800120e:	2120      	movs	r1, #32
 8001210:	54d1      	strb	r1, [r2, r3]
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <gameSetup+0x2a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <gameSetup+0x2a4>)
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <gameSetup+0x2a4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b10      	cmp	r3, #16
 8001222:	ddf1      	ble.n	8001208 <gameSetup+0x198>
	for(i = 0; i < 17; i++) sky[i] = ' ';
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <gameSetup+0x2a4>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e009      	b.n	8001240 <gameSetup+0x1d0>
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <gameSetup+0x2a4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a43      	ldr	r2, [pc, #268]	; (8001340 <gameSetup+0x2d0>)
 8001232:	2120      	movs	r1, #32
 8001234:	54d1      	strb	r1, [r2, r3]
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <gameSetup+0x2a4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a35      	ldr	r2, [pc, #212]	; (8001314 <gameSetup+0x2a4>)
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <gameSetup+0x2a4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b10      	cmp	r3, #16
 8001246:	ddf1      	ble.n	800122c <gameSetup+0x1bc>

	//use ground and sky to clear the screen
	LCD_Write_Instruction(lcd_Home);
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fcd9 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min 40us
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f7ff fc61 	bl	8000b18 <delay_us>

	LCD_Write_String(ground);
 8001256:	4839      	ldr	r0, [pc, #228]	; (800133c <gameSetup+0x2cc>)
 8001258:	f7ff fd16 	bl	8000c88 <LCD_Write_String>

	LCD_Write_Instruction(lcd_SetCursor | lcd_LineOne);
 800125c:	2080      	movs	r0, #128	; 0x80
 800125e:	f7ff fccf 	bl	8000c00 <LCD_Write_Instruction>
	delay_us(1000); //min 40us delay
 8001262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001266:	f7ff fc57 	bl	8000b18 <delay_us>

	LCD_Write_String(sky);
 800126a:	4835      	ldr	r0, [pc, #212]	; (8001340 <gameSetup+0x2d0>)
 800126c:	f7ff fd0c 	bl	8000c88 <LCD_Write_String>

	delay_us(20000); //20ms
 8001270:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001274:	f7ff fc50 	bl	8000b18 <delay_us>

	//Initialize game logic vars
	cpress = 0;
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <gameSetup+0x2d4>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	bpress = 0;
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <gameSetup+0x2d8>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	isUp = 0;
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <gameSetup+0x2dc>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	dontprint = 0;
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <gameSetup+0x2e0>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	birds = 0;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <gameSetup+0x2e4>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	distance = 0;
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <gameSetup+0x2e8>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	carLimit = 7;
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <gameSetup+0x2ec>)
 800129e:	2207      	movs	r2, #7
 80012a0:	601a      	str	r2, [r3, #0]
	score = 1;
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <gameSetup+0x2f0>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
	numTricks = 0;
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <gameSetup+0x2f4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
	trick = 0;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <gameSetup+0x2f8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
	overBird = 0;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <gameSetup+0x2fc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
	gameOver = 0;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <gameSetup+0x300>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	newHS = 0;
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <gameSetup+0x304>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	character = 0x03;
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <gameSetup+0x308>)
 80012c8:	2203      	movs	r2, #3
 80012ca:	701a      	strb	r2, [r3, #0]
	gameSpeed = 55;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <gameSetup+0x30c>)
 80012ce:	2237      	movs	r2, #55	; 0x37
 80012d0:	601a      	str	r2, [r3, #0]
	t = 0;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <gameSetup+0x310>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

	//store custom character to display's CGRAM @address 0x02
	LCD_Write_Instruction(0x50);
 80012d8:	2050      	movs	r0, #80	; 0x50
 80012da:	f7ff fc91 	bl	8000c00 <LCD_Write_Instruction>
	for(i=0; i<8; i++) LCD_Write_Char(jump3top[i]);
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <gameSetup+0x2a4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e00b      	b.n	80012fe <gameSetup+0x28e>
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <gameSetup+0x2a4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <gameSetup+0x314>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fca8 	bl	8000c44 <LCD_Write_Char>
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <gameSetup+0x2a4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <gameSetup+0x2a4>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <gameSetup+0x2a4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b07      	cmp	r3, #7
 8001304:	ddef      	ble.n	80012e6 <gameSetup+0x276>
	LCD_Write_Instruction(0x80); //end receiving char bits
 8001306:	2080      	movs	r0, #128	; 0x80
 8001308:	f7ff fc7a 	bl	8000c00 <LCD_Write_Instruction>
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	200001f8 	.word	0x200001f8
 8001318:	2000006c 	.word	0x2000006c
 800131c:	20000074 	.word	0x20000074
 8001320:	2000008c 	.word	0x2000008c
 8001324:	2000005c 	.word	0x2000005c
 8001328:	20000054 	.word	0x20000054
 800132c:	2000009c 	.word	0x2000009c
 8001330:	080024bc 	.word	0x080024bc
 8001334:	080024cc 	.word	0x080024cc
 8001338:	000f4240 	.word	0x000f4240
 800133c:	20000024 	.word	0x20000024
 8001340:	20000010 	.word	0x20000010
 8001344:	200001c8 	.word	0x200001c8
 8001348:	200001ec 	.word	0x200001ec
 800134c:	20000204 	.word	0x20000204
 8001350:	200001fc 	.word	0x200001fc
 8001354:	200001c9 	.word	0x200001c9
 8001358:	200001e8 	.word	0x200001e8
 800135c:	2000020c 	.word	0x2000020c
 8001360:	200001f0 	.word	0x200001f0
 8001364:	200001e0 	.word	0x200001e0
 8001368:	200001dc 	.word	0x200001dc
 800136c:	20000214 	.word	0x20000214
 8001370:	200001f4 	.word	0x200001f4
 8001374:	200001de 	.word	0x200001de
 8001378:	200001d4 	.word	0x200001d4
 800137c:	200001d8 	.word	0x200001d8
 8001380:	200001cc 	.word	0x200001cc
 8001384:	2000007c 	.word	0x2000007c

08001388 <main>:

int main(void)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
	//calls to initialization functions
	systick_Init();
 800138e:	f7ff fbb1 	bl	8000af4 <systick_Init>
	GPA_BUTTON_Init();
 8001392:	f7ff fd89 	bl	8000ea8 <GPA_BUTTON_Init>
	EXTI_Init_GPAButton();
 8001396:	f7ff fda1 	bl	8000edc <EXTI_Init_GPAButton>
	GPB_BUTTON_Init();
 800139a:	f7ff fdcd 	bl	8000f38 <GPB_BUTTON_Init>
	EXTI_Init_GPBButton();
 800139e:	f7ff fde5 	bl	8000f6c <EXTI_Init_GPBButton>
	LCD_GPIO_Init();
 80013a2:	f7ff fd23 	bl	8000dec <LCD_GPIO_Init>
	LCD_Init();
 80013a6:	f7ff fc91 	bl	8000ccc <LCD_Init>

	//Re-set priority of systick to highest
	NVIC_SetPriority(SysTick_IRQn, 0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff fb54 	bl	8000a5c <NVIC_SetPriority>

	//call to gameSetup
	gameSetup();
 80013b4:	f7ff fe5c 	bl	8001070 <gameSetup>
	/* Infinite loop - Game continues to run until game over */
	while (1)
	{
		//Shifts everything in bottom row to the left
		//(makes cars drive towards player)
		for(i = 0; i < 16; i++) ground[i] = ground[i + 1];
 80013b8:	4ba5      	ldr	r3, [pc, #660]	; (8001650 <main+0x2c8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00d      	b.n	80013dc <main+0x54>
 80013c0:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <main+0x2c8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4aa2      	ldr	r2, [pc, #648]	; (8001650 <main+0x2c8>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	3201      	adds	r2, #1
 80013ca:	49a2      	ldr	r1, [pc, #648]	; (8001654 <main+0x2cc>)
 80013cc:	5c89      	ldrb	r1, [r1, r2]
 80013ce:	4aa1      	ldr	r2, [pc, #644]	; (8001654 <main+0x2cc>)
 80013d0:	54d1      	strb	r1, [r2, r3]
 80013d2:	4b9f      	ldr	r3, [pc, #636]	; (8001650 <main+0x2c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a9d      	ldr	r2, [pc, #628]	; (8001650 <main+0x2c8>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <main+0x2c8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	dded      	ble.n	80013c0 <main+0x38>

		if((rand() % 100) > (rand() % 100) && !dontprint) { //handles car spawning
 80013e4:	f000 ff9e 	bl	8002324 <rand>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a9b      	ldr	r2, [pc, #620]	; (8001658 <main+0x2d0>)
 80013ec:	fb82 1203 	smull	r1, r2, r2, r3
 80013f0:	1151      	asrs	r1, r2, #5
 80013f2:	17da      	asrs	r2, r3, #31
 80013f4:	1a8c      	subs	r4, r1, r2
 80013f6:	2264      	movs	r2, #100	; 0x64
 80013f8:	fb02 f204 	mul.w	r2, r2, r4
 80013fc:	1a9c      	subs	r4, r3, r2
 80013fe:	f000 ff91 	bl	8002324 <rand>
 8001402:	4602      	mov	r2, r0
 8001404:	4b94      	ldr	r3, [pc, #592]	; (8001658 <main+0x2d0>)
 8001406:	fb83 1302 	smull	r1, r3, r3, r2
 800140a:	1159      	asrs	r1, r3, #5
 800140c:	17d3      	asrs	r3, r2, #31
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	429c      	cmp	r4, r3
 800141a:	dd37      	ble.n	800148c <main+0x104>
 800141c:	4b8f      	ldr	r3, [pc, #572]	; (800165c <main+0x2d4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d132      	bne.n	800148c <main+0x104>

			if (birds) { //if player is far enough for birds to appear
 8001426:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <main+0x2d8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <main+0xf0>
				if((rand() % 100) > (rand() % 100)) { //random chance for obstacle to be bird instead of car
 8001430:	f000 ff78 	bl	8002324 <rand>
 8001434:	4603      	mov	r3, r0
 8001436:	4a88      	ldr	r2, [pc, #544]	; (8001658 <main+0x2d0>)
 8001438:	fb82 1203 	smull	r1, r2, r2, r3
 800143c:	1151      	asrs	r1, r2, #5
 800143e:	17da      	asrs	r2, r3, #31
 8001440:	1a8c      	subs	r4, r1, r2
 8001442:	2264      	movs	r2, #100	; 0x64
 8001444:	fb02 f204 	mul.w	r2, r2, r4
 8001448:	1a9c      	subs	r4, r3, r2
 800144a:	f000 ff6b 	bl	8002324 <rand>
 800144e:	4602      	mov	r2, r0
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <main+0x2d0>)
 8001452:	fb83 1302 	smull	r1, r3, r3, r2
 8001456:	1159      	asrs	r1, r3, #5
 8001458:	17d3      	asrs	r3, r2, #31
 800145a:	1acb      	subs	r3, r1, r3
 800145c:	2164      	movs	r1, #100	; 0x64
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	429c      	cmp	r4, r3
 8001466:	dd03      	ble.n	8001470 <main+0xe8>
					ground[15] = '^';
 8001468:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <main+0x2cc>)
 800146a:	225e      	movs	r2, #94	; 0x5e
 800146c:	73da      	strb	r2, [r3, #15]
 800146e:	e006      	b.n	800147e <main+0xf6>
				} else ground[15] = 0x01;
 8001470:	4b78      	ldr	r3, [pc, #480]	; (8001654 <main+0x2cc>)
 8001472:	2201      	movs	r2, #1
 8001474:	73da      	strb	r2, [r3, #15]
 8001476:	e002      	b.n	800147e <main+0xf6>
			} else ground[15] = 0x01; //0x01 represents the cars
 8001478:	4b76      	ldr	r3, [pc, #472]	; (8001654 <main+0x2cc>)
 800147a:	2201      	movs	r2, #1
 800147c:	73da      	strb	r2, [r3, #15]

			dontprint = 1; //acts as boolean to ensure car separation
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <main+0x2d4>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
			distance = 0; //reset distance between cars
 8001484:	4b77      	ldr	r3, [pc, #476]	; (8001664 <main+0x2dc>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e002      	b.n	8001492 <main+0x10a>
		}
		else ground[15] = ' '; //if game does not spawn car, insert a space char
 800148c:	4b71      	ldr	r3, [pc, #452]	; (8001654 <main+0x2cc>)
 800148e:	2220      	movs	r2, #32
 8001490:	73da      	strb	r2, [r3, #15]

		//handles tracking char as it moves past player
		hold[0] = hold[1];
 8001492:	4b75      	ldr	r3, [pc, #468]	; (8001668 <main+0x2e0>)
 8001494:	785a      	ldrb	r2, [r3, #1]
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <main+0x2e0>)
 8001498:	701a      	strb	r2, [r3, #0]
		hold[1] = ground[3];
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <main+0x2cc>)
 800149c:	78da      	ldrb	r2, [r3, #3]
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <main+0x2e0>)
 80014a0:	705a      	strb	r2, [r3, #1]

		//if player is running and button is pressed
		//make player jump and set according flags
		if (!isUp && !isDown && cpress) {
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <main+0x2e4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11f      	bne.n	80014ec <main+0x164>
 80014ac:	4b70      	ldr	r3, [pc, #448]	; (8001670 <main+0x2e8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11a      	bne.n	80014ec <main+0x164>
 80014b6:	4b6f      	ldr	r3, [pc, #444]	; (8001674 <main+0x2ec>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <main+0x164>
			ground[3] = 0x06; //ground player pos shows player's feet
 80014c0:	4b64      	ldr	r3, [pc, #400]	; (8001654 <main+0x2cc>)
 80014c2:	2206      	movs	r2, #6
 80014c4:	70da      	strb	r2, [r3, #3]
			sky[3] = 0x02; //sky player pos shows player's upper body
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <main+0x2f0>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	70da      	strb	r2, [r3, #3]
			ground[2] = hold[0]; //ground behind player becomes char that was in front of player
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <main+0x2e0>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b60      	ldr	r3, [pc, #384]	; (8001654 <main+0x2cc>)
 80014d2:	709a      	strb	r2, [r3, #2]
			isUp = 1; //flag set to true to indicate player is in the air
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <main+0x2e4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			cpress = 0; //reset button press flag
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <main+0x2ec>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
			airborne++; //increment airborne
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <main+0x2f4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a65      	ldr	r2, [pc, #404]	; (800167c <main+0x2f4>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e106      	b.n	80016fa <main+0x372>
		}

		//if player is running and slide button pressed
		//make player slide and set according flags
		else if (!isUp && !isDown && bpress) {
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <main+0x2e4>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d136      	bne.n	8001564 <main+0x1dc>
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <main+0x2e8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d131      	bne.n	8001564 <main+0x1dc>
 8001500:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <main+0x2f8>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d02c      	beq.n	8001564 <main+0x1dc>
			//store custom character to display's CGRAM @address 0x03
			LCD_Write_Instruction(0x58);
 800150a:	2058      	movs	r0, #88	; 0x58
 800150c:	f7ff fb78 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(slide[i]);
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <main+0x2c8>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e00b      	b.n	8001530 <main+0x1a8>
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <main+0x2c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a59      	ldr	r2, [pc, #356]	; (8001684 <main+0x2fc>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb8f 	bl	8000c44 <LCD_Write_Char>
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <main+0x2c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a48      	ldr	r2, [pc, #288]	; (8001650 <main+0x2c8>)
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b47      	ldr	r3, [pc, #284]	; (8001650 <main+0x2c8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b07      	cmp	r3, #7
 8001536:	ddef      	ble.n	8001518 <main+0x190>
			LCD_Write_Instruction(0x80); //end receiving char bits
 8001538:	2080      	movs	r0, #128	; 0x80
 800153a:	f7ff fb61 	bl	8000c00 <LCD_Write_Instruction>

			ground[3] = 0x03;
 800153e:	4b45      	ldr	r3, [pc, #276]	; (8001654 <main+0x2cc>)
 8001540:	2203      	movs	r2, #3
 8001542:	70da      	strb	r2, [r3, #3]
			ground[2] = hold[0];
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <main+0x2e0>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <main+0x2cc>)
 800154a:	709a      	strb	r2, [r3, #2]
			isDown = 1; //flag set to true to indicate player is sliding
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <main+0x2e8>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
			bpress = 0; //reset button press flag
 8001552:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <main+0x2f8>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
			sliding++;
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <main+0x300>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a4a      	ldr	r2, [pc, #296]	; (8001688 <main+0x300>)
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e0ca      	b.n	80016fa <main+0x372>
		}

		//if player is in the air and has been for less than 4 cycles
		else if (isUp && !overBird && airborne < 4) {
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <main+0x2e4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d028      	beq.n	80015c0 <main+0x238>
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <main+0x304>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d124      	bne.n	80015c0 <main+0x238>
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <main+0x2f4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b03      	cmp	r3, #3
 800157c:	dc20      	bgt.n	80015c0 <main+0x238>

			//if player has been in air for one cycle
			if(airborne == 1) {
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <main+0x2f4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <main+0x20a>
				sky[3] = 0x07; //sky player pos shows player's jumping animation
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <main+0x2f0>)
 8001588:	2207      	movs	r2, #7
 800158a:	70da      	strb	r2, [r3, #3]
				ground[3] = ' '; //clear ground at players pos
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <main+0x2cc>)
 800158e:	2220      	movs	r2, #32
 8001590:	70da      	strb	r2, [r3, #3]
			}

			//if player has been in air for three cycles, they are about to land
			if(airborne == 3) {
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <main+0x2f4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d105      	bne.n	80015a6 <main+0x21e>
				ground[3] = 0x06; //ground player pos shows player's feet
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <main+0x2cc>)
 800159c:	2206      	movs	r2, #6
 800159e:	70da      	strb	r2, [r3, #3]
				sky[3] = 0x02; //sky player pos shows player's upper body
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <main+0x2f0>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	70da      	strb	r2, [r3, #3]
			}

			//otherwise, player is still in their jumping animation so no change needed

			//regardless,
			sky[2] = ' '; //sky behind player pos becomes blank
 80015a6:	4b34      	ldr	r3, [pc, #208]	; (8001678 <main+0x2f0>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	709a      	strb	r2, [r3, #2]
			ground[2] = hold[0]; //ground behind player becomes char that was in front of player
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <main+0x2e0>)
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <main+0x2cc>)
 80015b2:	709a      	strb	r2, [r3, #2]
			airborne++; //increment cycles player has been airborne
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <main+0x2f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <main+0x2f4>)
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e09c      	b.n	80016fa <main+0x372>
		}

		//if player is in the air and has been for 4 cycles or longer
		//make player land
		else if (isUp && !overBird && airborne >= 4) {
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <main+0x2e4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01b      	beq.n	8001602 <main+0x27a>
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <main+0x304>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d117      	bne.n	8001602 <main+0x27a>
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <main+0x2f4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	dd13      	ble.n	8001602 <main+0x27a>
			ground[3] = 0x06; //ground player pos shows player's feet
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <main+0x2cc>)
 80015dc:	2206      	movs	r2, #6
 80015de:	70da      	strb	r2, [r3, #3]
			sky[3] = 0x02; //sky player pos shows player's upper body
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <main+0x2f0>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	70da      	strb	r2, [r3, #3]
			ground[2] = hold[0]; //ground behind player becomes char that was in front of player
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <main+0x2e0>)
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <main+0x2cc>)
 80015ec:	709a      	strb	r2, [r3, #2]
			isUp = 0; //set flag to false to indicate player is on the ground
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <main+0x2e4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
			trick = 0; //set flag false to indicate player did not perform a trick
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <main+0x308>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			airborne = 0; //reset airborne counter for next jump
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <main+0x2f4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e07b      	b.n	80016fa <main+0x372>
		}

		//if player is sliding and has been for less than 3 cycles
		else if (isDown && sliding < 3) {
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <main+0x2e8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d010      	beq.n	800162e <main+0x2a6>
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <main+0x300>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b02      	cmp	r3, #2
 8001612:	dc0c      	bgt.n	800162e <main+0x2a6>
			ground[3] = 0x03;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <main+0x2cc>)
 8001616:	2203      	movs	r2, #3
 8001618:	70da      	strb	r2, [r3, #3]
			ground[2] = hold[0];
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <main+0x2e0>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <main+0x2cc>)
 8001620:	709a      	strb	r2, [r3, #2]
			sliding++;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <main+0x300>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a17      	ldr	r2, [pc, #92]	; (8001688 <main+0x300>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e065      	b.n	80016fa <main+0x372>
		}

		//if player is sliding and has been for 3 cycles or longer
		//make player get back up
		else if (isDown && sliding >= 3) {
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <main+0x2e8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d04f      	beq.n	80016d8 <main+0x350>
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <main+0x300>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	dd4b      	ble.n	80016d8 <main+0x350>

			//store custom character to display's CGRAM @address 0x03
			LCD_Write_Instruction(0x58);
 8001640:	2058      	movs	r0, #88	; 0x58
 8001642:	f7ff fadd 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(run1[i]);
 8001646:	4b02      	ldr	r3, [pc, #8]	; (8001650 <main+0x2c8>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e02e      	b.n	80016ac <main+0x324>
 800164e:	bf00      	nop
 8001650:	200001f8 	.word	0x200001f8
 8001654:	20000024 	.word	0x20000024
 8001658:	51eb851f 	.word	0x51eb851f
 800165c:	200001fc 	.word	0x200001fc
 8001660:	200001c9 	.word	0x200001c9
 8001664:	200001e8 	.word	0x200001e8
 8001668:	20000208 	.word	0x20000208
 800166c:	20000204 	.word	0x20000204
 8001670:	200001dd 	.word	0x200001dd
 8001674:	200001c8 	.word	0x200001c8
 8001678:	20000010 	.word	0x20000010
 800167c:	200001e4 	.word	0x200001e4
 8001680:	200001ec 	.word	0x200001ec
 8001684:	200000a4 	.word	0x200000a4
 8001688:	20000200 	.word	0x20000200
 800168c:	20000214 	.word	0x20000214
 8001690:	200001dc 	.word	0x200001dc
 8001694:	4b9a      	ldr	r3, [pc, #616]	; (8001900 <main+0x578>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a9a      	ldr	r2, [pc, #616]	; (8001904 <main+0x57c>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fad1 	bl	8000c44 <LCD_Write_Char>
 80016a2:	4b97      	ldr	r3, [pc, #604]	; (8001900 <main+0x578>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a95      	ldr	r2, [pc, #596]	; (8001900 <main+0x578>)
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <main+0x578>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	ddef      	ble.n	8001694 <main+0x30c>
			LCD_Write_Instruction(0x80); //end receiving char bits
 80016b4:	2080      	movs	r0, #128	; 0x80
 80016b6:	f7ff faa3 	bl	8000c00 <LCD_Write_Instruction>

			ground[3] = character; //return player to running
 80016ba:	4b93      	ldr	r3, [pc, #588]	; (8001908 <main+0x580>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	4b93      	ldr	r3, [pc, #588]	; (800190c <main+0x584>)
 80016c0:	70da      	strb	r2, [r3, #3]
			ground[2] = hold[0]; //ground behind player becomes char that was in front of player
 80016c2:	4b93      	ldr	r3, [pc, #588]	; (8001910 <main+0x588>)
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <main+0x584>)
 80016c8:	709a      	strb	r2, [r3, #2]
			isDown = 0; //set flag to false to indicate player is running
 80016ca:	4b92      	ldr	r3, [pc, #584]	; (8001914 <main+0x58c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
			sliding = 0; //reset sliding counter for next slide
 80016d0:	4b91      	ldr	r3, [pc, #580]	; (8001918 <main+0x590>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e010      	b.n	80016fa <main+0x372>
		}

		//if none of the above applied, player is running forward on the ground
		else {
			sky[3] = ' '; //sky player pos becomes blank as player is not in air
 80016d8:	4b90      	ldr	r3, [pc, #576]	; (800191c <main+0x594>)
 80016da:	2220      	movs	r2, #32
 80016dc:	70da      	strb	r2, [r3, #3]
			sky[2] = ' '; //sky behind player becomes blank
 80016de:	4b8f      	ldr	r3, [pc, #572]	; (800191c <main+0x594>)
 80016e0:	2220      	movs	r2, #32
 80016e2:	709a      	strb	r2, [r3, #2]
			ground[2] = ' '; //ground behind player becomes blank instead of what was in front of player
 80016e4:	4b89      	ldr	r3, [pc, #548]	; (800190c <main+0x584>)
 80016e6:	2220      	movs	r2, #32
 80016e8:	709a      	strb	r2, [r3, #2]
							 //(As player is running on the ground, simply need to remove past frame)
			if (!overBird) ground[3] = character; //update player's animation frame if not special case
 80016ea:	4b8d      	ldr	r3, [pc, #564]	; (8001920 <main+0x598>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <main+0x372>
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <main+0x580>)
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	4b85      	ldr	r3, [pc, #532]	; (800190c <main+0x584>)
 80016f8:	70da      	strb	r2, [r3, #3]
		}

		//if player is about to land and the char underneath is a car, make player do a trick!
		if (hold[1] == 0x01 && airborne == 4) {
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <main+0x588>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d11b      	bne.n	800173a <main+0x3b2>
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <main+0x59c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b04      	cmp	r3, #4
 8001708:	d117      	bne.n	800173a <main+0x3b2>
			sky[3] = 0x06; //sky player pos shows player's feet as they have jumped higher
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <main+0x594>)
 800170c:	2206      	movs	r2, #6
 800170e:	70da      	strb	r2, [r3, #3]
			sky[2] = ' '; //sky behind player becomes blank
 8001710:	4b82      	ldr	r3, [pc, #520]	; (800191c <main+0x594>)
 8001712:	2220      	movs	r2, #32
 8001714:	709a      	strb	r2, [r3, #2]
			ground[2] = hold[0]; //ground behind player becomes char that was in front of player
 8001716:	4b7e      	ldr	r3, [pc, #504]	; (8001910 <main+0x588>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b7c      	ldr	r3, [pc, #496]	; (800190c <main+0x584>)
 800171c:	709a      	strb	r2, [r3, #2]
			ground[3] = 0x05; //car underneath player is updated to show it has been tricked off of
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <main+0x584>)
 8001720:	2205      	movs	r2, #5
 8001722:	70da      	strb	r2, [r3, #3]
			airborne = 2; //airborne counter is reset to 2 so that player gains extra airtime
 8001724:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <main+0x59c>)
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
			trick = 1; //flag updated to show player has performed a trick
 800172a:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <main+0x5a0>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
			numTricks++; //num of tricks counter incremented
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <main+0x5a4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a7d      	ldr	r2, [pc, #500]	; (800192c <main+0x5a4>)
 8001738:	6013      	str	r3, [r2, #0]
		}

		//if distance between cars is over the limit
		if (distance > carLimit) {
 800173a:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <main+0x5a8>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <main+0x5ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	dd02      	ble.n	800174c <main+0x3c4>
			dontprint = 0; //don't spawn car flag set to low to indicate a new car can spawn
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <main+0x5b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
		}

		//running animation for player - alternates frame each cycle

		if (t == 1) {
 800174c:	4b7b      	ldr	r3, [pc, #492]	; (800193c <main+0x5b4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10e      	bne.n	8001772 <main+0x3ea>
			if (character == 0x03){
 8001754:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <main+0x580>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d103      	bne.n	8001764 <main+0x3dc>
				character = 0x04;
 800175c:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <main+0x580>)
 800175e:	2204      	movs	r2, #4
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e002      	b.n	800176a <main+0x3e2>
			}
			else {
				character = 0x03;
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <main+0x580>)
 8001766:	2203      	movs	r2, #3
 8001768:	701a      	strb	r2, [r3, #0]
			}
			t=0;
 800176a:	4b74      	ldr	r3, [pc, #464]	; (800193c <main+0x5b4>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e004      	b.n	800177c <main+0x3f4>
		} else t++;
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <main+0x5b4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a70      	ldr	r2, [pc, #448]	; (800193c <main+0x5b4>)
 800177a:	6013      	str	r3, [r2, #0]


		//Prints the current score during the game
		uint8_t cnt = 13; //starting at index 13 of sky
 800177c:	230d      	movs	r3, #13
 800177e:	73fb      	strb	r3, [r7, #15]
		for(i = 100; i > 0; i /= 10){
 8001780:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <main+0x578>)
 8001782:	2264      	movs	r2, #100	; 0x64
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e023      	b.n	80017d0 <main+0x448>
			sky[cnt] = ((score / i) % 10) + '0';
 8001788:	7bf8      	ldrb	r0, [r7, #15]
 800178a:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <main+0x5b8>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <main+0x578>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fb92 f2f3 	sdiv	r2, r2, r3
 8001796:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <main+0x5bc>)
 8001798:	fb83 1302 	smull	r1, r3, r3, r2
 800179c:	1099      	asrs	r1, r3, #2
 800179e:	17d3      	asrs	r3, r2, #31
 80017a0:	1ac9      	subs	r1, r1, r3
 80017a2:	460b      	mov	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	1ad1      	subs	r1, r2, r3
 80017ac:	b2cb      	uxtb	r3, r1
 80017ae:	3330      	adds	r3, #48	; 0x30
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <main+0x594>)
 80017b4:	541a      	strb	r2, [r3, r0]
			cnt++;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
		for(i = 100; i > 0; i /= 10){
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <main+0x578>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a60      	ldr	r2, [pc, #384]	; (8001944 <main+0x5bc>)
 80017c2:	fb82 1203 	smull	r1, r2, r2, r3
 80017c6:	1092      	asrs	r2, r2, #2
 80017c8:	17db      	asrs	r3, r3, #31
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <main+0x578>)
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <main+0x578>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dcd7      	bgt.n	8001788 <main+0x400>
		}

		//Prints the number of tricks during the game if num is > 0. Otherwise hidden.
		//Chosen to be like this as right now its functionality is more of an easter egg
		if(numTricks > 0) {
 80017d8:	4b54      	ldr	r3, [pc, #336]	; (800192c <main+0x5a4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dd2d      	ble.n	800183c <main+0x4b4>
			cnt = 10; //starting at index 10 of sky
 80017e0:	230a      	movs	r3, #10
 80017e2:	73fb      	strb	r3, [r7, #15]
			for(i=10; i > 0; i /= 10) {
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <main+0x578>)
 80017e6:	220a      	movs	r2, #10
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e023      	b.n	8001834 <main+0x4ac>
				sky[cnt] = ((numTricks/i) % 10) + '0';
 80017ec:	7bf8      	ldrb	r0, [r7, #15]
 80017ee:	4b4f      	ldr	r3, [pc, #316]	; (800192c <main+0x5a4>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <main+0x578>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fb92 f2f3 	sdiv	r2, r2, r3
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <main+0x5bc>)
 80017fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001800:	1099      	asrs	r1, r3, #2
 8001802:	17d3      	asrs	r3, r2, #31
 8001804:	1ac9      	subs	r1, r1, r3
 8001806:	460b      	mov	r3, r1
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	1ad1      	subs	r1, r2, r3
 8001810:	b2cb      	uxtb	r3, r1
 8001812:	3330      	adds	r3, #48	; 0x30
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <main+0x594>)
 8001818:	541a      	strb	r2, [r3, r0]
				cnt++;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	3301      	adds	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
			for(i=10; i > 0; i /= 10) {
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <main+0x578>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <main+0x5bc>)
 8001826:	fb82 1203 	smull	r1, r2, r2, r3
 800182a:	1092      	asrs	r2, r2, #2
 800182c:	17db      	asrs	r3, r3, #31
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a33      	ldr	r2, [pc, #204]	; (8001900 <main+0x578>)
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <main+0x578>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dcd7      	bgt.n	80017ec <main+0x464>


		//OverBird animation handling

		//if player is in the air and the char underneath is a bird, GAME OVER - start animation
		if (hold[1] == '^' && isUp) {
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <main+0x588>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b5e      	cmp	r3, #94	; 0x5e
 8001842:	d10b      	bne.n	800185c <main+0x4d4>
 8001844:	4b40      	ldr	r3, [pc, #256]	; (8001948 <main+0x5c0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <main+0x4d4>
			//sky[3] = '*'; //player gets hurt, symbolized by asterisk
			//ground[3] = ' '; //underneath player is updated to blank as bird has flown up
			sky[2] = ' '; //sky behind player becomes blank
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <main+0x594>)
 8001850:	2220      	movs	r2, #32
 8001852:	709a      	strb	r2, [r3, #2]

			overBird = 1;
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <main+0x598>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e0dd      	b.n	8001a18 <main+0x690>
		}

		//if player has game overed from attempting to jump over a bird - delayed by one frame for animation
		else if (overBird == 1) {
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <main+0x598>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <main+0x4ee>
			delay_us(500000); //500ms dramatic effect
 8001864:	4839      	ldr	r0, [pc, #228]	; (800194c <main+0x5c4>)
 8001866:	f7ff f957 	bl	8000b18 <delay_us>
			overBird++;
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <main+0x598>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <main+0x598>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e0d0      	b.n	8001a18 <main+0x690>
		}

		else if (overBird == 2) {
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <main+0x598>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d10b      	bne.n	8001896 <main+0x50e>
			sky[3] = '^'; //bird flies up, attacking player
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <main+0x594>)
 8001880:	225e      	movs	r2, #94	; 0x5e
 8001882:	70da      	strb	r2, [r3, #3]
			ground[3] = ' '; //bird leaves ground
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <main+0x584>)
 8001886:	2220      	movs	r2, #32
 8001888:	70da      	strb	r2, [r3, #3]
			overBird++;
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <main+0x598>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a23      	ldr	r2, [pc, #140]	; (8001920 <main+0x598>)
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e0c0      	b.n	8001a18 <main+0x690>
		}

		else if (overBird == 3) {
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <main+0x598>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d122      	bne.n	80018e4 <main+0x55c>
			sky[3] = '*'; //indicates bird hurt player
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <main+0x594>)
 80018a0:	222a      	movs	r2, #42	; 0x2a
 80018a2:	70da      	strb	r2, [r3, #3]

			//update custom character on CGRAM @address 0x02 to be crash custom character
			LCD_Write_Instruction(0x50);
 80018a4:	2050      	movs	r0, #80	; 0x50
 80018a6:	f7ff f9ab 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(crash[i]);
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <main+0x578>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e00b      	b.n	80018ca <main+0x542>
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <main+0x578>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a26      	ldr	r2, [pc, #152]	; (8001950 <main+0x5c8>)
 80018b8:	5cd3      	ldrb	r3, [r2, r3]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9c2 	bl	8000c44 <LCD_Write_Char>
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <main+0x578>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <main+0x578>)
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <main+0x578>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	ddef      	ble.n	80018b2 <main+0x52a>
			LCD_Write_Instruction(0x80); //end receiving char bits
 80018d2:	2080      	movs	r0, #128	; 0x80
 80018d4:	f7ff f994 	bl	8000c00 <LCD_Write_Instruction>

			overBird++;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <main+0x598>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <main+0x598>)
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e099      	b.n	8001a18 <main+0x690>
		}

		else if (overBird == 4) {
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <main+0x598>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d133      	bne.n	8001954 <main+0x5cc>
			sky[3] = 0x02;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <main+0x594>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	70da      	strb	r2, [r3, #3]
			overBird++;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <main+0x598>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <main+0x598>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e08c      	b.n	8001a18 <main+0x690>
 80018fe:	bf00      	nop
 8001900:	200001f8 	.word	0x200001f8
 8001904:	2000005c 	.word	0x2000005c
 8001908:	200001d4 	.word	0x200001d4
 800190c:	20000024 	.word	0x20000024
 8001910:	20000208 	.word	0x20000208
 8001914:	200001dd 	.word	0x200001dd
 8001918:	20000200 	.word	0x20000200
 800191c:	20000010 	.word	0x20000010
 8001920:	20000214 	.word	0x20000214
 8001924:	200001e4 	.word	0x200001e4
 8001928:	200001dc 	.word	0x200001dc
 800192c:	200001e0 	.word	0x200001e0
 8001930:	200001e8 	.word	0x200001e8
 8001934:	2000020c 	.word	0x2000020c
 8001938:	200001fc 	.word	0x200001fc
 800193c:	200001cc 	.word	0x200001cc
 8001940:	200001f0 	.word	0x200001f0
 8001944:	66666667 	.word	0x66666667
 8001948:	20000204 	.word	0x20000204
 800194c:	0007a120 	.word	0x0007a120
 8001950:	20000094 	.word	0x20000094
		}

		else if (overBird == 5) {
 8001954:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <main+0x7c8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10b      	bne.n	8001974 <main+0x5ec>
			sky[3] = ' ';
 800195c:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <main+0x7cc>)
 800195e:	2220      	movs	r2, #32
 8001960:	70da      	strb	r2, [r3, #3]
			ground[3] = 0x02;
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <main+0x7d0>)
 8001964:	2202      	movs	r2, #2
 8001966:	70da      	strb	r2, [r3, #3]
			overBird++;
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <main+0x7c8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a78      	ldr	r2, [pc, #480]	; (8001b50 <main+0x7c8>)
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e051      	b.n	8001a18 <main+0x690>
		}

		else if (overBird == 6) {
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <main+0x7c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b06      	cmp	r3, #6
 800197a:	d14d      	bne.n	8001a18 <main+0x690>

			delay_us(500000); //500ms dramatic effect
 800197c:	4877      	ldr	r0, [pc, #476]	; (8001b5c <main+0x7d4>)
 800197e:	f7ff f8cb 	bl	8000b18 <delay_us>

			gameOver = 1; //set gameOver flag to true
 8001982:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <main+0x7d8>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
			LCD_Write_Instruction(lcd_Clear); //clear the display
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff f939 	bl	8000c00 <LCD_Write_Instruction>
			delay_us(3000); //min delay of 1.64ms
 800198e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001992:	f7ff f8c1 	bl	8000b18 <delay_us>

			for(i = 0; i < 17; i++) ground[i] = ' '; //clear ground
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <main+0x7dc>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e009      	b.n	80019b2 <main+0x62a>
 800199e:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <main+0x7dc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6d      	ldr	r2, [pc, #436]	; (8001b58 <main+0x7d0>)
 80019a4:	2120      	movs	r1, #32
 80019a6:	54d1      	strb	r1, [r2, r3]
 80019a8:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <main+0x7dc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <main+0x7dc>)
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <main+0x7dc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	ddf1      	ble.n	800199e <main+0x616>
			for(i = 0; i < 17; i++) sky[i] = ' '; //clear sky
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <main+0x7dc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e009      	b.n	80019d6 <main+0x64e>
 80019c2:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <main+0x7dc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a63      	ldr	r2, [pc, #396]	; (8001b54 <main+0x7cc>)
 80019c8:	2120      	movs	r1, #32
 80019ca:	54d1      	strb	r1, [r2, r3]
 80019cc:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <main+0x7dc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	4a64      	ldr	r2, [pc, #400]	; (8001b64 <main+0x7dc>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <main+0x7dc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	ddf1      	ble.n	80019c2 <main+0x63a>

			//update custom character on CGRAM @address 0x02 to be standing frame of player
			LCD_Write_Instruction(0x50);
 80019de:	2050      	movs	r0, #80	; 0x50
 80019e0:	f7ff f90e 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(stand[i]);
 80019e4:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <main+0x7dc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e00b      	b.n	8001a04 <main+0x67c>
 80019ec:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <main+0x7dc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <main+0x7e0>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f925 	bl	8000c44 <LCD_Write_Char>
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <main+0x7dc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <main+0x7dc>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <main+0x7dc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b07      	cmp	r3, #7
 8001a0a:	ddef      	ble.n	80019ec <main+0x664>
			LCD_Write_Instruction(0x80); //end receiving char bits
 8001a0c:	2080      	movs	r0, #128	; 0x80
 8001a0e:	f7ff f8f7 	bl	8000c00 <LCD_Write_Instruction>

			//show player standing on index 14 of ground
			ground[14] = 0x02;
 8001a12:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <main+0x7d0>)
 8001a14:	2202      	movs	r2, #2
 8001a16:	739a      	strb	r2, [r3, #14]




		//If a bird is within the player's position and they are running on the ground, GAME OVER
		if (hold[1] == '^' && !isUp && !isDown) {
 8001a18:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <main+0x7e4>)
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	2b5e      	cmp	r3, #94	; 0x5e
 8001a1e:	d154      	bne.n	8001aca <main+0x742>
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <main+0x7e8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d14f      	bne.n	8001aca <main+0x742>
 8001a2a:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <main+0x7ec>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d14a      	bne.n	8001aca <main+0x742>
			gameOver = 1; //set gameOver flag to true
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <main+0x7d8>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
			LCD_Write_Instruction(lcd_Clear); //clear the display
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff f8e0 	bl	8000c00 <LCD_Write_Instruction>
			delay_us(3000); //min delay of 1.64ms
 8001a40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a44:	f7ff f868 	bl	8000b18 <delay_us>

			for(i = 0; i < 17; i++) ground[i] = ' '; //clear ground
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <main+0x7dc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e009      	b.n	8001a64 <main+0x6dc>
 8001a50:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <main+0x7dc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <main+0x7d0>)
 8001a56:	2120      	movs	r1, #32
 8001a58:	54d1      	strb	r1, [r2, r3]
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <main+0x7dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a40      	ldr	r2, [pc, #256]	; (8001b64 <main+0x7dc>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <main+0x7dc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	ddf1      	ble.n	8001a50 <main+0x6c8>
			for(i = 0; i < 17; i++) sky[i] = ' '; //clear sky
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <main+0x7dc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e009      	b.n	8001a88 <main+0x700>
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <main+0x7dc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <main+0x7cc>)
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	54d1      	strb	r1, [r2, r3]
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <main+0x7dc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a37      	ldr	r2, [pc, #220]	; (8001b64 <main+0x7dc>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <main+0x7dc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	ddf1      	ble.n	8001a74 <main+0x6ec>

			//update custom character on CGRAM @address 0x02 to be standing frame of player
			LCD_Write_Instruction(0x50);
 8001a90:	2050      	movs	r0, #80	; 0x50
 8001a92:	f7ff f8b5 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(stand[i]);
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <main+0x7dc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e00b      	b.n	8001ab6 <main+0x72e>
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <main+0x7dc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <main+0x7e0>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f8cc 	bl	8000c44 <LCD_Write_Char>
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <main+0x7dc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <main+0x7dc>)
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <main+0x7dc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b07      	cmp	r3, #7
 8001abc:	ddef      	ble.n	8001a9e <main+0x716>
			LCD_Write_Instruction(0x80); //end receiving char bits
 8001abe:	2080      	movs	r0, #128	; 0x80
 8001ac0:	f7ff f89e 	bl	8000c00 <LCD_Write_Instruction>

			//show player standing on index 14 of ground
			ground[14] = 0x02;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <main+0x7d0>)
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	739a      	strb	r2, [r3, #14]
		}

		//If a car is within the player's position and they are on the ground, GAME OVER
		if(hold[1] == 0x01 && !isUp && !trick) {
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <main+0x7e4>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d16a      	bne.n	8001ba8 <main+0x820>
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <main+0x7e8>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d165      	bne.n	8001ba8 <main+0x820>
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <main+0x7f0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d160      	bne.n	8001ba8 <main+0x820>
			gameOver = 1; //set gameOver flag to true
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <main+0x7d8>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
			LCD_Write_Instruction(lcd_Clear); //clear the display
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff f887 	bl	8000c00 <LCD_Write_Instruction>
			delay_us(3000); //min delay of 1.64ms
 8001af2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001af6:	f7ff f80f 	bl	8000b18 <delay_us>

			for(i = 0; i < 17; i++) ground[i] = ' '; //clear ground
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <main+0x7dc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e009      	b.n	8001b16 <main+0x78e>
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <main+0x7dc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <main+0x7d0>)
 8001b08:	2120      	movs	r1, #32
 8001b0a:	54d1      	strb	r1, [r2, r3]
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <main+0x7dc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <main+0x7dc>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <main+0x7dc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	ddf1      	ble.n	8001b02 <main+0x77a>
			for(i = 0; i < 17; i++) sky[i] = ' '; //clear sky
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <main+0x7dc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e009      	b.n	8001b3a <main+0x7b2>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <main+0x7dc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <main+0x7cc>)
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	54d1      	strb	r1, [r2, r3]
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <main+0x7dc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <main+0x7dc>)
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <main+0x7dc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	ddf1      	ble.n	8001b26 <main+0x79e>

			//update custom character on CGRAM @address 0x02 to be standing frame of player
			LCD_Write_Instruction(0x50);
 8001b42:	2050      	movs	r0, #80	; 0x50
 8001b44:	f7ff f85c 	bl	8000c00 <LCD_Write_Instruction>
			for(i=0; i<8; i++) LCD_Write_Char(stand[i]);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <main+0x7dc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e021      	b.n	8001b94 <main+0x80c>
 8001b50:	20000214 	.word	0x20000214
 8001b54:	20000010 	.word	0x20000010
 8001b58:	20000024 	.word	0x20000024
 8001b5c:	0007a120 	.word	0x0007a120
 8001b60:	200001f4 	.word	0x200001f4
 8001b64:	200001f8 	.word	0x200001f8
 8001b68:	20000054 	.word	0x20000054
 8001b6c:	20000208 	.word	0x20000208
 8001b70:	20000204 	.word	0x20000204
 8001b74:	200001dd 	.word	0x200001dd
 8001b78:	200001dc 	.word	0x200001dc
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <main+0xa68>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a9c      	ldr	r2, [pc, #624]	; (8001df4 <main+0xa6c>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f85d 	bl	8000c44 <LCD_Write_Char>
 8001b8a:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <main+0xa68>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a97      	ldr	r2, [pc, #604]	; (8001df0 <main+0xa68>)
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b96      	ldr	r3, [pc, #600]	; (8001df0 <main+0xa68>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	ddef      	ble.n	8001b7c <main+0x7f4>
			LCD_Write_Instruction(0x80); //end receiving char bits
 8001b9c:	2080      	movs	r0, #128	; 0x80
 8001b9e:	f7ff f82f 	bl	8000c00 <LCD_Write_Instruction>

			//show player standing on index 14 of ground
			ground[14] = 0x02;
 8001ba2:	4b95      	ldr	r3, [pc, #596]	; (8001df8 <main+0xa70>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	739a      	strb	r2, [r3, #14]
		}

		//update screen on each cycle
		LCD_Write_Instruction(lcd_SetCursor | lcd_LineOne);
 8001ba8:	2080      	movs	r0, #128	; 0x80
 8001baa:	f7ff f829 	bl	8000c00 <LCD_Write_Instruction>
		delay_us(100); //min 40us delay
 8001bae:	2064      	movs	r0, #100	; 0x64
 8001bb0:	f7fe ffb2 	bl	8000b18 <delay_us>
		LCD_Write_String(sky);
 8001bb4:	4891      	ldr	r0, [pc, #580]	; (8001dfc <main+0xa74>)
 8001bb6:	f7ff f867 	bl	8000c88 <LCD_Write_String>

		LCD_Write_Instruction(lcd_SetCursor | lcd_LineTwo);
 8001bba:	20c0      	movs	r0, #192	; 0xc0
 8001bbc:	f7ff f820 	bl	8000c00 <LCD_Write_Instruction>
		delay_us(100); //min 40us delay
 8001bc0:	2064      	movs	r0, #100	; 0x64
 8001bc2:	f7fe ffa9 	bl	8000b18 <delay_us>
		LCD_Write_String(ground);
 8001bc6:	488c      	ldr	r0, [pc, #560]	; (8001df8 <main+0xa70>)
 8001bc8:	f7ff f85e 	bl	8000c88 <LCD_Write_String>


		//logic for game's increasing difficulty
		if (score % 20 == 0) gameSpeed -= 5; //increase game speed every 5 score
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <main+0xa78>)
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <main+0xa7c>)
 8001bd2:	fb83 2301 	smull	r2, r3, r3, r1
 8001bd6:	10da      	asrs	r2, r3, #3
 8001bd8:	17cb      	asrs	r3, r1, #31
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	1aca      	subs	r2, r1, r3
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d104      	bne.n	8001bf4 <main+0x86c>
 8001bea:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <main+0xa80>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3b05      	subs	r3, #5
 8001bf0:	4a85      	ldr	r2, [pc, #532]	; (8001e08 <main+0xa80>)
 8001bf2:	6013      	str	r3, [r2, #0]
		if (score % 150 == 0) carLimit--; //decrease min distance between cars every 150 score
 8001bf4:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <main+0xa78>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b84      	ldr	r3, [pc, #528]	; (8001e0c <main+0xa84>)
 8001bfa:	fb83 1302 	smull	r1, r3, r3, r2
 8001bfe:	1119      	asrs	r1, r3, #4
 8001c00:	17d3      	asrs	r3, r2, #31
 8001c02:	1acb      	subs	r3, r1, r3
 8001c04:	2196      	movs	r1, #150	; 0x96
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d104      	bne.n	8001c1a <main+0x892>
 8001c10:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <main+0xa88>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	4a7e      	ldr	r2, [pc, #504]	; (8001e10 <main+0xa88>)
 8001c18:	6013      	str	r3, [r2, #0]
		if (score > 50) birds = 1; //add birds to dodge at certain score limit
 8001c1a:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <main+0xa78>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b32      	cmp	r3, #50	; 0x32
 8001c20:	dd02      	ble.n	8001c28 <main+0x8a0>
 8001c22:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <main+0xa8c>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
		if (carLimit < 4) carLimit = 4; //absolute min of car distance is 4
 8001c28:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <main+0xa88>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	dc02      	bgt.n	8001c36 <main+0x8ae>
 8001c30:	4b77      	ldr	r3, [pc, #476]	; (8001e10 <main+0xa88>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	601a      	str	r2, [r3, #0]

		//if game speed is > 0, delay by the amount on each cycle
		if (gameSpeed > 0) delay_us(gameSpeed);
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <main+0xa80>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	dd04      	ble.n	8001c48 <main+0x8c0>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <main+0xa80>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe ff68 	bl	8000b18 <delay_us>

		//increase distance and score on each cycle
		distance++;
 8001c48:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <main+0xa90>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a72      	ldr	r2, [pc, #456]	; (8001e18 <main+0xa90>)
 8001c50:	6013      	str	r3, [r2, #0]
		score++;
 8001c52:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <main+0xa78>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a69      	ldr	r2, [pc, #420]	; (8001e00 <main+0xa78>)
 8001c5a:	6013      	str	r3, [r2, #0]

		//If player game overed:
		if(gameOver) {
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <main+0xa94>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f43f aba8 	beq.w	80013b8 <main+0x30>

			//update high score to be the achieved score if achieved score is higher
			if(score > highscore) {
 8001c68:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <main+0xa78>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <main+0xa98>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dd3b      	ble.n	8001cec <main+0x964>
				highscore = score;
 8001c74:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <main+0xa78>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a69      	ldr	r2, [pc, #420]	; (8001e20 <main+0xa98>)
 8001c7a:	6013      	str	r3, [r2, #0]
				newHS = 1; //set flag to indicate a new high score has been achieved.
 8001c7c:	4b69      	ldr	r3, [pc, #420]	; (8001e24 <main+0xa9c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]

				//Update stored custom characters to hold player victory animation frames

				//update custom character on CGRAM @address 0x06 to be celebrationJump
				LCD_Write_Instruction(0x70);
 8001c82:	2070      	movs	r0, #112	; 0x70
 8001c84:	f7fe ffbc 	bl	8000c00 <LCD_Write_Instruction>
				for(i=0; i<8; i++) LCD_Write_Char(celebrateJump[i]);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <main+0xa68>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00b      	b.n	8001ca8 <main+0x920>
 8001c90:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <main+0xa68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a64      	ldr	r2, [pc, #400]	; (8001e28 <main+0xaa0>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ffd3 	bl	8000c44 <LCD_Write_Char>
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <main+0xa68>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <main+0xa68>)
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <main+0xa68>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	ddef      	ble.n	8001c90 <main+0x908>
				LCD_Write_Instruction(0x80); //end receiving char bits
 8001cb0:	2080      	movs	r0, #128	; 0x80
 8001cb2:	f7fe ffa5 	bl	8000c00 <LCD_Write_Instruction>

				//update custom character on CGRAM @address 0x05 to be celebrationStand
				LCD_Write_Instruction(0x68);
 8001cb6:	2068      	movs	r0, #104	; 0x68
 8001cb8:	f7fe ffa2 	bl	8000c00 <LCD_Write_Instruction>
				for(i=0; i<8; i++) LCD_Write_Char(celebrate[i]);
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <main+0xa68>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00b      	b.n	8001cdc <main+0x954>
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <main+0xa68>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <main+0xaa4>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ffb9 	bl	8000c44 <LCD_Write_Char>
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <main+0xa68>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a45      	ldr	r2, [pc, #276]	; (8001df0 <main+0xa68>)
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <main+0xa68>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	ddef      	ble.n	8001cc4 <main+0x93c>
				LCD_Write_Instruction(0x80); //end receiving char bits
 8001ce4:	2080      	movs	r0, #128	; 0x80
 8001ce6:	f7fe ff8b 	bl	8000c00 <LCD_Write_Instruction>
 8001cea:	e019      	b.n	8001d20 <main+0x998>
			}

			else {
				//defeat animation
				//update custom character on CGRAM @address 0x05 to be crash frame
				LCD_Write_Instruction(0x68);
 8001cec:	2068      	movs	r0, #104	; 0x68
 8001cee:	f7fe ff87 	bl	8000c00 <LCD_Write_Instruction>
				for(i=0; i<8; i++) LCD_Write_Char(crash[i]);
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <main+0xa68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e00b      	b.n	8001d12 <main+0x98a>
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <main+0xa68>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <main+0xaa8>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe ff9e 	bl	8000c44 <LCD_Write_Char>
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <main+0xa68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a38      	ldr	r2, [pc, #224]	; (8001df0 <main+0xa68>)
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <main+0xa68>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b07      	cmp	r3, #7
 8001d18:	ddef      	ble.n	8001cfa <main+0x972>
				LCD_Write_Instruction(0x80); //end receiving char bits
 8001d1a:	2080      	movs	r0, #128	; 0x80
 8001d1c:	f7fe ff70 	bl	8000c00 <LCD_Write_Instruction>
			}

			//update high score for number of tricks to be the achieved score if achieved score is higher
			if(numTricks > highnumTricks) {
 8001d20:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <main+0xaac>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <main+0xab0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dd03      	ble.n	8001d34 <main+0x9ac>
				highnumTricks = numTricks;
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <main+0xaac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a41      	ldr	r2, [pc, #260]	; (8001e38 <main+0xab0>)
 8001d32:	6013      	str	r3, [r2, #0]
			}

			//set timers for gameover animations to 0
			cnt = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
			int scoreTimer = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
			uint8_t jumpTimer = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]

			//car for game over and not high score animation pos initialized to 15
			int carPos = 15;
 8001d40:	230f      	movs	r3, #15
 8001d42:	603b      	str	r3, [r7, #0]

			while(1) { //waits for user to press button to play again
				if(cpress) {
 8001d44:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <main+0xab4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <main+0x9d2>
					gameOver = 0; //reset game over flag
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <main+0xa94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
					gameSetup(); //call to gameSetup() again to initialize game for another playthrough
 8001d54:	f7ff f98c 	bl	8001070 <gameSetup>
					break; //exit this while loop
 8001d58:	e17f      	b.n	800205a <main+0xcd2>
				}

				//displays score and high score for 15 cycles
				if(scoreTimer == 0) {
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 80b0 	bne.w	8001ec2 <main+0xb3a>
					for(i = 0; i < sizeof(gameovertop); i++) sky[i] = gameovertop[i];
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <main+0xa68>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e00c      	b.n	8001d84 <main+0x9fc>
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <main+0xa68>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <main+0xa68>)
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4933      	ldr	r1, [pc, #204]	; (8001e40 <main+0xab8>)
 8001d74:	5c89      	ldrb	r1, [r1, r2]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <main+0xa74>)
 8001d78:	54d1      	strb	r1, [r2, r3]
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <main+0xa68>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <main+0xa68>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <main+0xa68>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d9ee      	bls.n	8001d6a <main+0x9e2>
					cnt = sizeof(gameovertop) - 1;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	73fb      	strb	r3, [r7, #15]
					for(i = 100; i > 0; i /= 10){
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <main+0xa68>)
 8001d92:	2264      	movs	r2, #100	; 0x64
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e023      	b.n	8001de0 <main+0xa58>
						sky[cnt] = ((score / i) % 10) + '0';
 8001d98:	7bf8      	ldrb	r0, [r7, #15]
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <main+0xa78>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <main+0xa68>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fb92 f2f3 	sdiv	r2, r2, r3
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <main+0xa7c>)
 8001da8:	fb83 1302 	smull	r1, r3, r3, r2
 8001dac:	1099      	asrs	r1, r3, #2
 8001dae:	17d3      	asrs	r3, r2, #31
 8001db0:	1ac9      	subs	r1, r1, r3
 8001db2:	460b      	mov	r3, r1
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	1ad1      	subs	r1, r2, r3
 8001dbc:	b2cb      	uxtb	r3, r1
 8001dbe:	3330      	adds	r3, #48	; 0x30
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <main+0xa74>)
 8001dc4:	541a      	strb	r2, [r3, r0]
						cnt++;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
					for(i = 100; i > 0; i /= 10){
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <main+0xa68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <main+0xa7c>)
 8001dd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd6:	1092      	asrs	r2, r2, #2
 8001dd8:	17db      	asrs	r3, r3, #31
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <main+0xa68>)
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <main+0xa68>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dcd7      	bgt.n	8001d98 <main+0xa10>
					}

					for(i = 0; i < sizeof(gameoverbottom); i++) ground[i] = gameoverbottom[i];
 8001de8:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <main+0xa68>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e036      	b.n	8001e5e <main+0xad6>
 8001df0:	200001f8 	.word	0x200001f8
 8001df4:	20000054 	.word	0x20000054
 8001df8:	20000024 	.word	0x20000024
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	200001f0 	.word	0x200001f0
 8001e04:	66666667 	.word	0x66666667
 8001e08:	200001d8 	.word	0x200001d8
 8001e0c:	1b4e81b5 	.word	0x1b4e81b5
 8001e10:	2000020c 	.word	0x2000020c
 8001e14:	200001c9 	.word	0x200001c9
 8001e18:	200001e8 	.word	0x200001e8
 8001e1c:	200001f4 	.word	0x200001f4
 8001e20:	20000210 	.word	0x20000210
 8001e24:	200001de 	.word	0x200001de
 8001e28:	200000b4 	.word	0x200000b4
 8001e2c:	200000ac 	.word	0x200000ac
 8001e30:	20000094 	.word	0x20000094
 8001e34:	200001e0 	.word	0x200001e0
 8001e38:	200001d0 	.word	0x200001d0
 8001e3c:	200001c8 	.word	0x200001c8
 8001e40:	20000038 	.word	0x20000038
 8001e44:	4b86      	ldr	r3, [pc, #536]	; (8002060 <main+0xcd8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a85      	ldr	r2, [pc, #532]	; (8002060 <main+0xcd8>)
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4985      	ldr	r1, [pc, #532]	; (8002064 <main+0xcdc>)
 8001e4e:	5c89      	ldrb	r1, [r1, r2]
 8001e50:	4a85      	ldr	r2, [pc, #532]	; (8002068 <main+0xce0>)
 8001e52:	54d1      	strb	r1, [r2, r3]
 8001e54:	4b82      	ldr	r3, [pc, #520]	; (8002060 <main+0xcd8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a81      	ldr	r2, [pc, #516]	; (8002060 <main+0xcd8>)
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <main+0xcd8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d9ee      	bls.n	8001e44 <main+0xabc>
					cnt = sizeof(gameoverbottom) - 1;
 8001e66:	2306      	movs	r3, #6
 8001e68:	73fb      	strb	r3, [r7, #15]
					for(i = 100; i > 0; i /= 10){
 8001e6a:	4b7d      	ldr	r3, [pc, #500]	; (8002060 <main+0xcd8>)
 8001e6c:	2264      	movs	r2, #100	; 0x64
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e023      	b.n	8001eba <main+0xb32>
						ground[cnt] = ((highscore / i) % 10) + '0';
 8001e72:	7bf8      	ldrb	r0, [r7, #15]
 8001e74:	4b7d      	ldr	r3, [pc, #500]	; (800206c <main+0xce4>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <main+0xcd8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <main+0xce8>)
 8001e82:	fb83 1302 	smull	r1, r3, r3, r2
 8001e86:	1099      	asrs	r1, r3, #2
 8001e88:	17d3      	asrs	r3, r2, #31
 8001e8a:	1ac9      	subs	r1, r1, r3
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	1ad1      	subs	r1, r2, r3
 8001e96:	b2cb      	uxtb	r3, r1
 8001e98:	3330      	adds	r3, #48	; 0x30
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b72      	ldr	r3, [pc, #456]	; (8002068 <main+0xce0>)
 8001e9e:	541a      	strb	r2, [r3, r0]
						cnt++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
					for(i = 100; i > 0; i /= 10){
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <main+0xcd8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a71      	ldr	r2, [pc, #452]	; (8002070 <main+0xce8>)
 8001eac:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb0:	1092      	asrs	r2, r2, #2
 8001eb2:	17db      	asrs	r3, r3, #31
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <main+0xcd8>)
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b69      	ldr	r3, [pc, #420]	; (8002060 <main+0xcd8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	dcd7      	bgt.n	8001e72 <main+0xaea>
					}
				}

				//15 cycles after score/highscore display,
				//if player performed a trick, display numTricks and highNumTricks for 15 cycles
				if(scoreTimer > 15 && numTricks > 0) {
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	dd7a      	ble.n	8001fbe <main+0xc36>
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <main+0xcec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	dd76      	ble.n	8001fbe <main+0xc36>
					for(i = 0; i < sizeof(gameovertrick); i++) sky[i] = gameovertrick[i];
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <main+0xcd8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00c      	b.n	8001ef2 <main+0xb6a>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <main+0xcd8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <main+0xcd8>)
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4965      	ldr	r1, [pc, #404]	; (8002078 <main+0xcf0>)
 8001ee2:	5c89      	ldrb	r1, [r1, r2]
 8001ee4:	4a65      	ldr	r2, [pc, #404]	; (800207c <main+0xcf4>)
 8001ee6:	54d1      	strb	r1, [r2, r3]
 8001ee8:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <main+0xcd8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <main+0xcd8>)
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <main+0xcd8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d9ee      	bls.n	8001ed8 <main+0xb50>
					cnt = sizeof(gameovertrick) - 1;
 8001efa:	2308      	movs	r3, #8
 8001efc:	73fb      	strb	r3, [r7, #15]
					for(i = 10; i > 0; i /= 10){
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <main+0xcd8>)
 8001f00:	220a      	movs	r2, #10
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e023      	b.n	8001f4e <main+0xbc6>
						sky[cnt] = ((numTricks / i) % 10) + '0';
 8001f06:	7bf8      	ldrb	r0, [r7, #15]
 8001f08:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <main+0xcec>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b54      	ldr	r3, [pc, #336]	; (8002060 <main+0xcd8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f14:	4b56      	ldr	r3, [pc, #344]	; (8002070 <main+0xce8>)
 8001f16:	fb83 1302 	smull	r1, r3, r3, r2
 8001f1a:	1099      	asrs	r1, r3, #2
 8001f1c:	17d3      	asrs	r3, r2, #31
 8001f1e:	1ac9      	subs	r1, r1, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	1ad1      	subs	r1, r2, r3
 8001f2a:	b2cb      	uxtb	r3, r1
 8001f2c:	3330      	adds	r3, #48	; 0x30
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b52      	ldr	r3, [pc, #328]	; (800207c <main+0xcf4>)
 8001f32:	541a      	strb	r2, [r3, r0]
						cnt++;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
					for(i = 10; i > 0; i /= 10){
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <main+0xcd8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <main+0xce8>)
 8001f40:	fb82 1203 	smull	r1, r2, r2, r3
 8001f44:	1092      	asrs	r2, r2, #2
 8001f46:	17db      	asrs	r3, r3, #31
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4a45      	ldr	r2, [pc, #276]	; (8002060 <main+0xcd8>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <main+0xcd8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dcd7      	bgt.n	8001f06 <main+0xb7e>
					}

					cnt = sizeof(gameoverbottom);
 8001f56:	2307      	movs	r3, #7
 8001f58:	73fb      	strb	r3, [r7, #15]
					for(i = 10; i > 0; i /= 10){
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <main+0xcd8>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e023      	b.n	8001faa <main+0xc22>
						ground[cnt] = ((highnumTricks / i) % 10) + '0';
 8001f62:	7bf8      	ldrb	r0, [r7, #15]
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <main+0xcf8>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <main+0xcd8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <main+0xce8>)
 8001f72:	fb83 1302 	smull	r1, r3, r3, r2
 8001f76:	1099      	asrs	r1, r3, #2
 8001f78:	17d3      	asrs	r3, r2, #31
 8001f7a:	1ac9      	subs	r1, r1, r3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	1ad1      	subs	r1, r2, r3
 8001f86:	b2cb      	uxtb	r3, r1
 8001f88:	3330      	adds	r3, #48	; 0x30
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <main+0xce0>)
 8001f8e:	541a      	strb	r2, [r3, r0]
						cnt++;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3301      	adds	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
					for(i = 10; i > 0; i /= 10){
 8001f96:	4b32      	ldr	r3, [pc, #200]	; (8002060 <main+0xcd8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <main+0xce8>)
 8001f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa0:	1092      	asrs	r2, r2, #2
 8001fa2:	17db      	asrs	r3, r3, #31
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <main+0xcd8>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <main+0xcd8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dcd7      	bgt.n	8001f62 <main+0xbda>
					}

					ground[6] = ' '; //set ground pos 6 to blank to hide extra digit of highscore
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <main+0xce0>)
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	719a      	strb	r2, [r3, #6]

					scoreTimer = -15; //set score timer to -15 so score/highscore will be
 8001fb8:	f06f 030e 	mvn.w	r3, #14
 8001fbc:	60bb      	str	r3, [r7, #8]
									  //displayed again 15 cycles after these scores
				}

				//celebration animation
				//player jumps in celebration every 8 cycles if highscore achieved
				if (newHS && jumpTimer > 8) {
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <main+0xcfc>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d016      	beq.n	8001ff6 <main+0xc6e>
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d913      	bls.n	8001ff6 <main+0xc6e>
					if (sky[14] == 0x06) {
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <main+0xcf4>)
 8001fd0:	7b9b      	ldrb	r3, [r3, #14]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d106      	bne.n	8001fe4 <main+0xc5c>
						sky[14] = ' ';
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <main+0xcf4>)
 8001fd8:	2220      	movs	r2, #32
 8001fda:	739a      	strb	r2, [r3, #14]
						ground[14] = 0x05;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <main+0xce0>)
 8001fde:	2205      	movs	r2, #5
 8001fe0:	739a      	strb	r2, [r3, #14]
 8001fe2:	e005      	b.n	8001ff0 <main+0xc68>
					}
					else {
						ground[14] = ' ';
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <main+0xce0>)
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	739a      	strb	r2, [r3, #14]
						sky[14] = 0x06;
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <main+0xcf4>)
 8001fec:	2206      	movs	r2, #6
 8001fee:	739a      	strb	r2, [r3, #14]
					}
					jumpTimer = 0; //timer reset upon jump
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	e018      	b.n	8002028 <main+0xca0>
				}
				//if player did not achieve highscore, jump timer will increment past 8
				//after 13 cycles, car will drive over player
				//this statement continues to drive the car left each cycle that car's pos > 8
				else if (jumpTimer > 13 && carPos > 8) {
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b0d      	cmp	r3, #13
 8001ffa:	d910      	bls.n	800201e <main+0xc96>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	dd0d      	ble.n	800201e <main+0xc96>
					ground[carPos] = 0x01;
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <main+0xce0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
					ground[carPos+1] = ' '; //last pos of car reset to blank (also deletes player)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <main+0xce0>)
 8002012:	2120      	movs	r1, #32
 8002014:	54d1      	strb	r1, [r2, r3]
					carPos--; //decrement carPos
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3b01      	subs	r3, #1
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	e004      	b.n	8002028 <main+0xca0>
				}
				else {
					//after car gets to pos 8, frame updated to rubble as it has crashed
					ground[carPos+1] = 0x05;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <main+0xce0>)
 8002024:	2105      	movs	r1, #5
 8002026:	54d1      	strb	r1, [r2, r3]
				}

				//update screen on each cyle
				LCD_Write_Instruction(lcd_SetCursor | lcd_LineOne);
 8002028:	2080      	movs	r0, #128	; 0x80
 800202a:	f7fe fde9 	bl	8000c00 <LCD_Write_Instruction>
				delay_us(100); //min 40us delay
 800202e:	2064      	movs	r0, #100	; 0x64
 8002030:	f7fe fd72 	bl	8000b18 <delay_us>
				LCD_Write_String(sky);
 8002034:	4811      	ldr	r0, [pc, #68]	; (800207c <main+0xcf4>)
 8002036:	f7fe fe27 	bl	8000c88 <LCD_Write_String>

				LCD_Write_Instruction(lcd_SetCursor | lcd_LineTwo);
 800203a:	20c0      	movs	r0, #192	; 0xc0
 800203c:	f7fe fde0 	bl	8000c00 <LCD_Write_Instruction>
				delay_us(100); //min 40us delay
 8002040:	2064      	movs	r0, #100	; 0x64
 8002042:	f7fe fd69 	bl	8000b18 <delay_us>
				LCD_Write_String(ground);
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <main+0xce0>)
 8002048:	f7fe fe1e 	bl	8000c88 <LCD_Write_String>

				//increment timers on each cyle
				jumpTimer++;
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	3301      	adds	r3, #1
 8002050:	71fb      	strb	r3, [r7, #7]
				scoreTimer++;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3301      	adds	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
				if(cpress) {
 8002058:	e674      	b.n	8001d44 <main+0x9bc>
	{
 800205a:	f7ff b9ad 	b.w	80013b8 <main+0x30>
 800205e:	bf00      	nop
 8002060:	200001f8 	.word	0x200001f8
 8002064:	20000040 	.word	0x20000040
 8002068:	20000024 	.word	0x20000024
 800206c:	20000210 	.word	0x20000210
 8002070:	66666667 	.word	0x66666667
 8002074:	200001e0 	.word	0x200001e0
 8002078:	20000048 	.word	0x20000048
 800207c:	20000010 	.word	0x20000010
 8002080:	200001d0 	.word	0x200001d0
 8002084:	200001de 	.word	0x200001de

08002088 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002092:	bf00      	nop
}
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80020a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020b6:	e003      	b.n	80020c0 <LoopCopyDataInit>

080020b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020be:	3104      	adds	r1, #4

080020c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c8:	d3f6      	bcc.n	80020b8 <CopyDataInit>
  ldr  r2, =_sbss
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020cc:	e002      	b.n	80020d4 <LoopFillZerobss>

080020ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020d0:	f842 3b04 	str.w	r3, [r2], #4

080020d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d8:	d3f9      	bcc.n	80020ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020da:	f000 f84d 	bl	8002178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020de:	f000 f8fd 	bl	80022dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e2:	f7ff f951 	bl	8001388 <main>
  bx  lr    
 80020e6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020ec:	080024e8 	.word	0x080024e8
  ldr  r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f4:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80020f8:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80020fc:	20000220 	.word	0x20000220

08002100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>

08002102 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002114:	e7fe      	b.n	8002114 <HardFault_Handler+0x4>

08002116 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800211a:	e7fe      	b.n	800211a <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002120:	e7fe      	b.n	8002120 <BusFault_Handler+0x4>

08002122 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002126:	e7fe      	b.n	8002126 <UsageFault_Handler+0x4>

08002128 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
__IO uint32_t Timingdelay;
void SysTick_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	if(Timingdelay !=0)
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <SysTick_Handler+0x20>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <SysTick_Handler+0x16>
		Timingdelay--;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Handler+0x20>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	4a03      	ldr	r2, [pc, #12]	; (8002174 <SysTick_Handler+0x20>)
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000218 	.word	0x20000218

08002178 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <SystemInit+0x60>)
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <SystemInit+0x60>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <SystemInit+0x64>)
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <SystemInit+0x64>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <SystemInit+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <SystemInit+0x64>)
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <SystemInit+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <SystemInit+0x64>)
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <SystemInit+0x68>)
 80021b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <SystemInit+0x64>)
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <SystemInit+0x64>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80021c6:	f000 f80d 	bl	80021e4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <SystemInit+0x60>)
 80021cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d0:	609a      	str	r2, [r3, #8]
#endif
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	24003010 	.word	0x24003010

080021e4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80021f2:	4a36      	ldr	r2, [pc, #216]	; (80022cc <SetSysClock+0xe8>)
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <SetSysClock+0xe8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <SetSysClock+0xe8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <SetSysClock+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800221a:	d1f0      	bne.n	80021fe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <SetSysClock+0xe8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002228:	2301      	movs	r3, #1
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	e001      	b.n	8002232 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d142      	bne.n	80022be <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <SetSysClock+0xe8>)
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <SetSysClock+0xe8>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <SetSysClock+0xec>)
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <SetSysClock+0xec>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800224e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002250:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <SetSysClock+0xe8>)
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <SetSysClock+0xe8>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <SetSysClock+0xe8>)
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <SetSysClock+0xe8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <SetSysClock+0xe8>)
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <SetSysClock+0xe8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800226e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <SetSysClock+0xe8>)
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <SetSysClock+0xf0>)
 8002274:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <SetSysClock+0xe8>)
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <SetSysClock+0xe8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002280:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002282:	bf00      	nop
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <SetSysClock+0xe8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f9      	beq.n	8002284 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <SetSysClock+0xf4>)
 8002292:	f240 6205 	movw	r2, #1541	; 0x605
 8002296:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <SetSysClock+0xe8>)
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <SetSysClock+0xe8>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <SetSysClock+0xe8>)
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <SetSysClock+0xe8>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80022b0:	bf00      	nop
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SetSysClock+0xe8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d1f9      	bne.n	80022b2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	07405408 	.word	0x07405408
 80022d8:	40023c00 	.word	0x40023c00

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4e0d      	ldr	r6, [pc, #52]	; (8002314 <__libc_init_array+0x38>)
 80022e0:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e2:	1ba4      	subs	r4, r4, r6
 80022e4:	10a4      	asrs	r4, r4, #2
 80022e6:	2500      	movs	r5, #0
 80022e8:	42a5      	cmp	r5, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	4e0b      	ldr	r6, [pc, #44]	; (800231c <__libc_init_array+0x40>)
 80022ee:	4c0c      	ldr	r4, [pc, #48]	; (8002320 <__libc_init_array+0x44>)
 80022f0:	f000 f8d8 	bl	80024a4 <_init>
 80022f4:	1ba4      	subs	r4, r4, r6
 80022f6:	10a4      	asrs	r4, r4, #2
 80022f8:	2500      	movs	r5, #0
 80022fa:	42a5      	cmp	r5, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002304:	4798      	blx	r3
 8002306:	3501      	adds	r5, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800230e:	4798      	blx	r3
 8002310:	3501      	adds	r5, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	080024e0 	.word	0x080024e0
 8002318:	080024e0 	.word	0x080024e0
 800231c:	080024e0 	.word	0x080024e0
 8002320:	080024e4 	.word	0x080024e4

08002324 <rand>:
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <rand+0x68>)
 8002326:	b510      	push	{r4, lr}
 8002328:	681c      	ldr	r4, [r3, #0]
 800232a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800232c:	b9d3      	cbnz	r3, 8002364 <rand+0x40>
 800232e:	2018      	movs	r0, #24
 8002330:	f000 f832 	bl	8002398 <malloc>
 8002334:	f243 330e 	movw	r3, #13070	; 0x330e
 8002338:	63a0      	str	r0, [r4, #56]	; 0x38
 800233a:	8003      	strh	r3, [r0, #0]
 800233c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8002340:	8043      	strh	r3, [r0, #2]
 8002342:	f241 2334 	movw	r3, #4660	; 0x1234
 8002346:	8083      	strh	r3, [r0, #4]
 8002348:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800234c:	80c3      	strh	r3, [r0, #6]
 800234e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8002352:	8103      	strh	r3, [r0, #8]
 8002354:	2305      	movs	r3, #5
 8002356:	8143      	strh	r3, [r0, #10]
 8002358:	230b      	movs	r3, #11
 800235a:	8183      	strh	r3, [r0, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	2300      	movs	r3, #0
 8002360:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002364:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002366:	480a      	ldr	r0, [pc, #40]	; (8002390 <rand+0x6c>)
 8002368:	690a      	ldr	r2, [r1, #16]
 800236a:	694b      	ldr	r3, [r1, #20]
 800236c:	4c09      	ldr	r4, [pc, #36]	; (8002394 <rand+0x70>)
 800236e:	4350      	muls	r0, r2
 8002370:	fb04 0003 	mla	r0, r4, r3, r0
 8002374:	fba2 2304 	umull	r2, r3, r2, r4
 8002378:	3201      	adds	r2, #1
 800237a:	4403      	add	r3, r0
 800237c:	f143 0300 	adc.w	r3, r3, #0
 8002380:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002384:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8002388:	bd10      	pop	{r4, pc}
 800238a:	bf00      	nop
 800238c:	200000c0 	.word	0x200000c0
 8002390:	5851f42d 	.word	0x5851f42d
 8002394:	4c957f2d 	.word	0x4c957f2d

08002398 <malloc>:
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <malloc+0xc>)
 800239a:	4601      	mov	r1, r0
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f000 b803 	b.w	80023a8 <_malloc_r>
 80023a2:	bf00      	nop
 80023a4:	200000c0 	.word	0x200000c0

080023a8 <_malloc_r>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	1ccd      	adds	r5, r1, #3
 80023ac:	f025 0503 	bic.w	r5, r5, #3
 80023b0:	3508      	adds	r5, #8
 80023b2:	2d0c      	cmp	r5, #12
 80023b4:	bf38      	it	cc
 80023b6:	250c      	movcc	r5, #12
 80023b8:	2d00      	cmp	r5, #0
 80023ba:	4606      	mov	r6, r0
 80023bc:	db01      	blt.n	80023c2 <_malloc_r+0x1a>
 80023be:	42a9      	cmp	r1, r5
 80023c0:	d903      	bls.n	80023ca <_malloc_r+0x22>
 80023c2:	230c      	movs	r3, #12
 80023c4:	6033      	str	r3, [r6, #0]
 80023c6:	2000      	movs	r0, #0
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
 80023ca:	f000 f85b 	bl	8002484 <__malloc_lock>
 80023ce:	4a23      	ldr	r2, [pc, #140]	; (800245c <_malloc_r+0xb4>)
 80023d0:	6814      	ldr	r4, [r2, #0]
 80023d2:	4621      	mov	r1, r4
 80023d4:	b991      	cbnz	r1, 80023fc <_malloc_r+0x54>
 80023d6:	4c22      	ldr	r4, [pc, #136]	; (8002460 <_malloc_r+0xb8>)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	b91b      	cbnz	r3, 80023e4 <_malloc_r+0x3c>
 80023dc:	4630      	mov	r0, r6
 80023de:	f000 f841 	bl	8002464 <_sbrk_r>
 80023e2:	6020      	str	r0, [r4, #0]
 80023e4:	4629      	mov	r1, r5
 80023e6:	4630      	mov	r0, r6
 80023e8:	f000 f83c 	bl	8002464 <_sbrk_r>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d126      	bne.n	800243e <_malloc_r+0x96>
 80023f0:	230c      	movs	r3, #12
 80023f2:	6033      	str	r3, [r6, #0]
 80023f4:	4630      	mov	r0, r6
 80023f6:	f000 f846 	bl	8002486 <__malloc_unlock>
 80023fa:	e7e4      	b.n	80023c6 <_malloc_r+0x1e>
 80023fc:	680b      	ldr	r3, [r1, #0]
 80023fe:	1b5b      	subs	r3, r3, r5
 8002400:	d41a      	bmi.n	8002438 <_malloc_r+0x90>
 8002402:	2b0b      	cmp	r3, #11
 8002404:	d90f      	bls.n	8002426 <_malloc_r+0x7e>
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	50cd      	str	r5, [r1, r3]
 800240a:	18cc      	adds	r4, r1, r3
 800240c:	4630      	mov	r0, r6
 800240e:	f000 f83a 	bl	8002486 <__malloc_unlock>
 8002412:	f104 000b 	add.w	r0, r4, #11
 8002416:	1d23      	adds	r3, r4, #4
 8002418:	f020 0007 	bic.w	r0, r0, #7
 800241c:	1ac3      	subs	r3, r0, r3
 800241e:	d01b      	beq.n	8002458 <_malloc_r+0xb0>
 8002420:	425a      	negs	r2, r3
 8002422:	50e2      	str	r2, [r4, r3]
 8002424:	bd70      	pop	{r4, r5, r6, pc}
 8002426:	428c      	cmp	r4, r1
 8002428:	bf0d      	iteet	eq
 800242a:	6863      	ldreq	r3, [r4, #4]
 800242c:	684b      	ldrne	r3, [r1, #4]
 800242e:	6063      	strne	r3, [r4, #4]
 8002430:	6013      	streq	r3, [r2, #0]
 8002432:	bf18      	it	ne
 8002434:	460c      	movne	r4, r1
 8002436:	e7e9      	b.n	800240c <_malloc_r+0x64>
 8002438:	460c      	mov	r4, r1
 800243a:	6849      	ldr	r1, [r1, #4]
 800243c:	e7ca      	b.n	80023d4 <_malloc_r+0x2c>
 800243e:	1cc4      	adds	r4, r0, #3
 8002440:	f024 0403 	bic.w	r4, r4, #3
 8002444:	42a0      	cmp	r0, r4
 8002446:	d005      	beq.n	8002454 <_malloc_r+0xac>
 8002448:	1a21      	subs	r1, r4, r0
 800244a:	4630      	mov	r0, r6
 800244c:	f000 f80a 	bl	8002464 <_sbrk_r>
 8002450:	3001      	adds	r0, #1
 8002452:	d0cd      	beq.n	80023f0 <_malloc_r+0x48>
 8002454:	6025      	str	r5, [r4, #0]
 8002456:	e7d9      	b.n	800240c <_malloc_r+0x64>
 8002458:	bd70      	pop	{r4, r5, r6, pc}
 800245a:	bf00      	nop
 800245c:	20000140 	.word	0x20000140
 8002460:	20000144 	.word	0x20000144

08002464 <_sbrk_r>:
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	4c06      	ldr	r4, [pc, #24]	; (8002480 <_sbrk_r+0x1c>)
 8002468:	2300      	movs	r3, #0
 800246a:	4605      	mov	r5, r0
 800246c:	4608      	mov	r0, r1
 800246e:	6023      	str	r3, [r4, #0]
 8002470:	f000 f80a 	bl	8002488 <_sbrk>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d102      	bne.n	800247e <_sbrk_r+0x1a>
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	b103      	cbz	r3, 800247e <_sbrk_r+0x1a>
 800247c:	602b      	str	r3, [r5, #0]
 800247e:	bd38      	pop	{r3, r4, r5, pc}
 8002480:	2000021c 	.word	0x2000021c

08002484 <__malloc_lock>:
 8002484:	4770      	bx	lr

08002486 <__malloc_unlock>:
 8002486:	4770      	bx	lr

08002488 <_sbrk>:
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <_sbrk+0x14>)
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	4602      	mov	r2, r0
 800248e:	b909      	cbnz	r1, 8002494 <_sbrk+0xc>
 8002490:	4903      	ldr	r1, [pc, #12]	; (80024a0 <_sbrk+0x18>)
 8002492:	6019      	str	r1, [r3, #0]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	4402      	add	r2, r0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	4770      	bx	lr
 800249c:	20000148 	.word	0x20000148
 80024a0:	20000220 	.word	0x20000220

080024a4 <_init>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr

080024b0 <_fini>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr
